{
  "x-generator": "NSwag v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Debos Api",
    "version": "v1.0"
  },
  "servers": [
    {
      "url": "https://localhost:7081"
    }
  ],
  "paths": {
    "/v1/users/{id}": {
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Updates a user and return the updated info",
        "operationId": "EndpointsFeaturesUsersEndpointsUpdateUserEndpoint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "requestBody": {
          "x-name": "UpdateUserRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfUpdateUserErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Updated user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a user",
        "operationId": "EndpointsFeaturesUsersEndpointsDeleteUserEndpoint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfDeleteUserErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "User deleted"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/users/me": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get user information from user calling the endpoint",
        "operationId": "EndpointsFeaturesUsersEndpointsGetMeEndpoint",
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetMeErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "User information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Returns a list of users according to the specified criteria.",
        "operationId": "EndpointsFeaturesUsersEndpointsAdminQueryUsersEndpoint",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "LastName",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "Email",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "PhoneNumber",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "CursorDirectionEnum",
            "in": "query",
            "schema": {
              "title": "CursorDirectionEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "After",
                "Before"
              ],
              "enum": [
                "After",
                "Before"
              ]
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Int32",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfAdminQueryUsersErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminQueryUsersResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/permissions/regenerate": {
      "post": {
        "tags": [
          "permissions"
        ],
        "summary": "Regenerates default permissions for a user",
        "description": "Regenerates default permissions for a user",
        "operationId": "EndpointsFeaturesPermissionsEndpointsRegenerateEndpoint",
        "requestBody": {
          "x-name": "RegeneratePermissionsForUserRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegeneratePermissionsForUserRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfRegeneratePermissionErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "The permissions were generated successfully"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/permissions/by-grantee": {
      "get": {
        "tags": [
          "permissions"
        ],
        "summary": "List permissions for a given grantee according to the given criteria",
        "description": "List permissions for a given grantee",
        "operationId": "EndpointsFeaturesPermissionsEndpointsListByGranteeEndpoint",
        "parameters": [
          {
            "name": "Grantee",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "AppHolder",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "ContextType",
            "in": "query",
            "required": true,
            "schema": {
              "title": "ContextTypeEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "space",
                "user",
                "group"
              ],
              "enum": [
                "space",
                "user",
                "group"
              ]
            }
          },
          {
            "name": "Context",
            "in": "query",
            "required": true,
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "ResourceType",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "Action",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfListByGranteePermissionErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPermissionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/permissions/by-context": {
      "get": {
        "tags": [
          "permissions"
        ],
        "summary": "List permissions for a given context according to the given criteria",
        "description": "List permissions for a given context",
        "operationId": "EndpointsFeaturesPermissionsEndpointsListByContextEndpoint",
        "parameters": [
          {
            "name": "ContextType",
            "in": "query",
            "required": true,
            "schema": {
              "title": "ContextTypeEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "space",
                "user",
                "group"
              ],
              "enum": [
                "space",
                "user",
                "group"
              ]
            }
          },
          {
            "name": "Context",
            "in": "query",
            "required": true,
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "ResourceType",
            "in": "query",
            "required": true,
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "Action",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "ActionObject",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "CursorDirectionEnum",
            "in": "query",
            "schema": {
              "title": "CursorDirectionEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "After",
                "Before"
              ],
              "enum": [
                "After",
                "Before"
              ]
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Int32",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfListByContextPermissionErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPermissionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/permissions": {
      "delete": {
        "tags": [
          "permissions"
        ],
        "summary": "Deletes a permission",
        "description": "Deletes a permission",
        "operationId": "EndpointsFeaturesPermissionsEndpointsDeleteEndpoint",
        "requestBody": {
          "x-name": "DeletePermissionRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePermissionRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfDeletePermissionErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "The permission was deleted"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "permissions"
        ],
        "summary": "Creates a permission as admin",
        "description": "Creates a permission as admin",
        "operationId": "EndpointsFeaturesPermissionsEndpointsCreateEndpoint",
        "requestBody": {
          "x-name": "CreatePermissionRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePermissionRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfCreatePermissionErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "The permission was created"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/groups/{GroupId}/members": {
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Removes a member from a group",
        "operationId": "EndpointsFeaturesGroupsEndpointsRemoveMemberFromGroupEndpoint",
        "parameters": [
          {
            "name": "GroupId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "requestBody": {
          "x-name": "RemoveMemberFromGroupRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveMemberFromGroupRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfRemoveMemberFromGroupErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Member removed successfully"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "List members of a group",
        "operationId": "EndpointsFeaturesGroupsEndpointsListMembersOfGroupEndpoint",
        "parameters": [
          {
            "name": "GroupId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "MemberType",
            "in": "query",
            "required": true,
            "schema": {
              "title": "MemberTypeEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "Group",
                "User"
              ],
              "enum": [
                "Group",
                "User"
              ]
            }
          },
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "CursorDirectionEnum",
            "in": "query",
            "schema": {
              "title": "CursorDirectionEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "After",
                "Before"
              ],
              "enum": [
                "After",
                "Before"
              ]
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Int32",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfListMembersOfGroupErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of members",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMembersOfGroupResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Adds a member to a group",
        "operationId": "EndpointsFeaturesGroupsEndpointsAddMemberToGroupEndpoint",
        "parameters": [
          {
            "name": "GroupId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "requestBody": {
          "x-name": "AddMemberToGroupRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMemberToGroupRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfAddMemberToGroupErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Member added successfully"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/groups/{GroupId}": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Returns a group by id",
        "operationId": "EndpointsFeaturesGroupsEndpointsGetGroupEndpoint",
        "parameters": [
          {
            "name": "GroupId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetGroupErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Group found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGroupResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Deletes a group",
        "operationId": "EndpointsFeaturesGroupsEndpointsDeleteGroupEndpoint",
        "parameters": [
          {
            "name": "GroupId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfDeleteGroupErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Group deleted successfully"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/groups": {
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Creates a new group",
        "operationId": "EndpointsFeaturesGroupsEndpointsCreateGroupEndpoint",
        "requestBody": {
          "x-name": "CreateGroupRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfCreateGroupErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Group created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGroupResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Returns a list of groups according to the specified criteria.",
        "operationId": "EndpointsFeaturesGroupsEndpointsAdminQueryGroupsEndpoint",
        "parameters": [
          {
            "name": "GroupName",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "MemberType",
            "in": "query",
            "schema": {
              "title": "MemberTypeEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "Group",
                "User"
              ],
              "enum": [
                "Group",
                "User"
              ]
            }
          },
          {
            "name": "MemberId",
            "in": "query",
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "OwnerId",
            "in": "query",
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "CursorDirectionEnum",
            "in": "query",
            "schema": {
              "title": "CursorDirectionEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "After",
                "Before"
              ],
              "enum": [
                "After",
                "Before"
              ]
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Int32",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfAdminQueryGroupsErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of groups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminQueryGroupsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/health": {
      "get": {
        "tags": [
          "health"
        ],
        "operationId": "EndpointsFeaturesCommonEndpointsHealthEndpoint",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/auth/token": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Returns access token",
        "operationId": "EndpointsFeaturesAuthEndpointsTokenEndpoint",
        "parameters": [
          {
            "name": "x-application-type",
            "in": "header",
            "required": true,
            "schema": {
              "title": "String",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "x-name": "TokenRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfTokenErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Returns JWT tokens",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/signup": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Creates a new user account",
        "operationId": "EndpointsFeaturesAuthEndpointsSignUpEndpoint",
        "requestBody": {
          "x-name": "SignUpRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfSignUpErrorCodes"
                }
              }
            }
          },
          "200": {
            "description": "Returns tokens and user information or Mfa Challenge",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/signin": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Authenticates a user",
        "description": "Authenticates a user. Returns JWT tokens or Mfa Challenge",
        "operationId": "EndpointsFeaturesAuthEndpointsSignInEndpoint",
        "parameters": [
          {
            "name": "x-application-type",
            "in": "header",
            "required": true,
            "schema": {
              "title": "String",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "x-name": "SignInRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfSignInErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Returns tokens and user information or Mfa Challenge",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/resend-confirmation-code": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Resends email confirmation code",
        "operationId": "EndpointsFeaturesAuthEndpointsResendConfirmationCodeEndpoint",
        "requestBody": {
          "x-name": "ResendCodeRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendCodeRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfResendConfirmationCodeErrorCode"
                }
              }
            }
          },
          "200": {
            "description": "Code has been resent to the user"
          }
        }
      }
    },
    "/v1/auth/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logout a user",
        "description": "Logout a user. Refresh token should be sent in the request body or as a cookie",
        "operationId": "EndpointsFeaturesAuthEndpointsLogoutEndpoint",
        "requestBody": {
          "x-name": "LogoutRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfLogoutErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "User has been logged out successfully"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/auth/idps": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Returns the list of available identity providers",
        "operationId": "EndpointsFeaturesAuthEndpointsIdpsEndpoint",
        "parameters": [
          {
            "name": "x-application-type",
            "in": "header",
            "required": true,
            "schema": {
              "title": "String",
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfIdpsErrorCode"
                }
              }
            }
          },
          "200": {
            "description": "List of available identity providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdpsResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/forgot-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Starts a password reset process",
        "operationId": "EndpointsFeaturesAuthEndpointsForgotPasswordEndpoint",
        "requestBody": {
          "x-name": "ForgotPasswordRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfForgotPasswordErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Password recovery started successfully"
          }
        }
      }
    },
    "/v1/auth/confirm-mfa": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Validates MFA code",
        "operationId": "EndpointsFeaturesAuthEndpointsConfirmMfaEndpoint",
        "parameters": [
          {
            "name": "x-application-type",
            "in": "header",
            "required": true,
            "schema": {
              "title": "String",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "x-name": "ConfirmMfaRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmMfaRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfConfirmMfaErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "MFA Code has been validated and tokens are returned in the response. Refresh token is returned in body or cookie",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/confirm-forgot-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Confirm a recovery password procedure with provided code",
        "operationId": "EndpointsFeaturesAuthEndpointsConfirmForgotPasswordEndpoint",
        "requestBody": {
          "x-name": "ResetPasswordRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfConfirmForgotPasswordErrorCode"
                }
              }
            }
          },
          "200": {
            "description": "Password has been changed"
          }
        }
      }
    },
    "/v1/auth/confirm-email": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Confirm the sign up of a user with a confirmation code.",
        "operationId": "EndpointsFeaturesAuthEndpointsConfirmEmailEndpoint",
        "requestBody": {
          "x-name": "ConfirmEmailRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmEmailRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfConfirmEmailErrorCode"
                }
              }
            }
          },
          "200": {
            "description": "Email confirmed."
          }
        }
      }
    },
    "/v1/auth/change-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Changes user's password",
        "operationId": "EndpointsFeaturesAuthEndpointsChangePasswordEndpoint",
        "requestBody": {
          "x-name": "ChangePasswordRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfChangePasswordErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Password changed successfully"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponseOfEndpointErrorOfUpdateUserErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfUpdateUserErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfUpdateUserErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/UpdateUserErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "UpdateUserErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "UserNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "UserNotFound"
        ]
      },
      "ValidationFailure": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "propertyName": {
            "type": "string",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "attemptedValue": {
            "nullable": true
          },
          "customState": {
            "nullable": true
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "errorCode": {
            "type": "string",
            "nullable": true
          },
          "formattedMessagePlaceholderValues": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {}
          }
        }
      },
      "Severity": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Error",
          "Warning",
          "Info"
        ],
        "enum": [
          "Error",
          "Warning",
          "Info"
        ]
      },
      "UnAuthorizedResponse": {
        "type": "object",
        "description": "The response sent when 403 error is returned",
        "additionalProperties": false,
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message"
          },
          "missingPermission": {
            "description": "The missing permission",
            "oneOf": [
              {
                "$ref": "#/components/schemas/MissingPermission"
              }
            ]
          },
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          }
        }
      },
      "MissingPermission": {
        "type": "object",
        "description": "Data about the missing permission. Serializable to the client",
        "additionalProperties": false,
        "properties": {
          "contextType": {
            "type": "string",
            "description": "Context type"
          },
          "context": {
            "type": "string",
            "description": "Context of the permission"
          },
          "action": {
            "type": "string",
            "description": "Action of the permission"
          },
          "actionObject": {
            "type": "string",
            "description": "Object associated with the action, if any",
            "nullable": true
          }
        }
      },
      "GetUserResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "idCard": {
            "type": "string",
            "nullable": true
          },
          "passport": {
            "type": "string",
            "nullable": true
          },
          "mobilePhone": {
            "type": "string",
            "nullable": true
          },
          "landLinePhone": {
            "type": "string",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "nullable": true
          },
          "apple": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "google": {
            "type": "string",
            "nullable": true
          },
          "gitHub": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "mobilePhone"
        ],
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "idCard": {
            "type": "string",
            "nullable": true
          },
          "passport": {
            "type": "string",
            "nullable": true
          },
          "mobilePhone": {
            "type": "string",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "nullable": false
          },
          "landLinePhone": {
            "type": "string",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "nullable": true
          },
          "apple": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "google": {
            "type": "string",
            "nullable": true
          },
          "gitHub": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfGetMeErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetMeErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetMeErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetMeErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetMeErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "UserNotFound",
          "InvalidId"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "UserNotFound",
          "InvalidId"
        ]
      },
      "ErrorResponseOfEndpointErrorOfDeleteUserErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfDeleteUserErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfDeleteUserErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/DeleteUserErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "DeleteUserErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "UserNotFound",
          "FailedToDeleteUserInAuthorizationService"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "UserNotFound",
          "FailedToDeleteUserInAuthorizationService"
        ]
      },
      "ErrorResponseOfEndpointErrorOfAdminQueryUsersErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfAdminQueryUsersErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfAdminQueryUsersErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/AdminQueryUsersErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "AdminQueryUsersErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter"
        ]
      },
      "AdminQueryUsersResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDtoLite"
            }
          },
          "cursor": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UserDtoLite": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfRegeneratePermissionErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfRegeneratePermissionErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "CursorDirectionEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "After",
          "Before"
        ],
        "enum": [
          "After",
          "Before"
        ]
      },
      "EndpointErrorOfRegeneratePermissionErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/RegeneratePermissionErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "RegeneratePermissionErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ]
      },
      "RegeneratePermissionsForUserRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "userId"
        ],
        "properties": {
          "entityType": {
            "$ref": "#/components/schemas/EntityTypeEnum"
          },
          "userId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "EntityTypeEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "User",
          "Group",
          "Space"
        ],
        "enum": [
          "User",
          "Group",
          "Space"
        ]
      },
      "ErrorResponseOfEndpointErrorOfListByGranteePermissionErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfListByGranteePermissionErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfListByGranteePermissionErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/ListByGranteePermissionErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "ListByGranteePermissionErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ]
      },
      "ListPermissionsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionDtoResponse"
            }
          },
          "cursor": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PermissionDtoResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "contextType": {
            "$ref": "#/components/schemas/ContextTypeEnum"
          },
          "context": {
            "type": "string"
          },
          "resourceType": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "actionObject": {
            "type": "string",
            "nullable": true
          },
          "granteeType": {
            "$ref": "#/components/schemas/GranteeType"
          },
          "grantee": {
            "type": "string",
            "format": "guid"
          },
          "appHolder": {
            "type": "string"
          },
          "inheritedFrom": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ContextTypeEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "space",
          "user",
          "group"
        ],
        "enum": [
          "space",
          "user",
          "group"
        ]
      },
      "GranteeType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "User",
          "Group"
        ],
        "enum": [
          "User",
          "Group"
        ]
      },
      "ErrorResponseOfEndpointErrorOfListByContextPermissionErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfListByContextPermissionErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfListByContextPermissionErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/ListByContextPermissionErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "ListByContextPermissionErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ]
      },
      "ErrorResponseOfEndpointErrorOfDeletePermissionErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfDeletePermissionErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfDeletePermissionErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/DeletePermissionErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "DeletePermissionErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ]
      },
      "DeletePermissionRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "contextType",
          "context",
          "resourceType",
          "action",
          "granteeType",
          "grantee"
        ],
        "properties": {
          "contextType": {
            "minLength": 1,
            "nullable": false,
            "$ref": "#/components/schemas/ContextTypeEnum"
          },
          "context": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-zA-Z\\-\\.0-9\\s]+$",
            "nullable": false
          },
          "resourceType": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-zA-Z\\-\\.0-9\\s]+$",
            "nullable": false
          },
          "action": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-zA-Z\\-\\.0-9\\s]+$",
            "nullable": false
          },
          "actionObject": {
            "type": "string",
            "pattern": "^[a-zA-Z\\-\\.0-9\\s]+|\\*$",
            "nullable": true
          },
          "granteeType": {
            "minLength": 1,
            "nullable": false,
            "$ref": "#/components/schemas/GranteeType"
          },
          "grantee": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "appHolder": {
            "type": "string",
            "pattern": "^[a-zA-Z\\-\\.0-9\\s]+$",
            "nullable": true
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfCreatePermissionErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfCreatePermissionErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfCreatePermissionErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/CreatePermissionErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "CreatePermissionErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ]
      },
      "CreatePermissionRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "contextType",
          "context",
          "resourceType",
          "action",
          "granteeType",
          "grantee"
        ],
        "properties": {
          "contextType": {
            "minLength": 1,
            "nullable": false,
            "$ref": "#/components/schemas/ContextTypeEnum"
          },
          "context": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-zA-Z\\-\\.0-9\\s]+$",
            "nullable": false
          },
          "resourceType": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-zA-Z\\-\\.0-9\\s]+$",
            "nullable": false
          },
          "action": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-zA-Z\\-\\.0-9\\s]+$",
            "nullable": false
          },
          "actionObject": {
            "type": "string",
            "pattern": "^[a-zA-Z\\-\\.0-9\\s]+|\\*$",
            "nullable": true
          },
          "granteeType": {
            "minLength": 1,
            "nullable": false,
            "$ref": "#/components/schemas/GranteeType"
          },
          "grantee": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "appHolder": {
            "type": "string",
            "pattern": "^[a-zA-Z\\-\\.0-9\\s]+$",
            "nullable": true
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfRemoveMemberFromGroupErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfRemoveMemberFromGroupErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfRemoveMemberFromGroupErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/RemoveMemberFromGroupErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "RemoveMemberFromGroupErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "ErrorModifyingPermissions",
          "MemberAlreadyInGroup",
          "GroupNotFound",
          "MemberNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "ErrorModifyingPermissions",
          "MemberAlreadyInGroup",
          "GroupNotFound",
          "MemberNotFound"
        ]
      },
      "RemoveMemberFromGroupRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "groupId",
          "memberType",
          "memberId"
        ],
        "properties": {
          "memberType": {
            "nullable": false,
            "$ref": "#/components/schemas/MemberTypeEnum"
          },
          "memberId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "MemberTypeEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Group",
          "User"
        ],
        "enum": [
          "Group",
          "User"
        ]
      },
      "ErrorResponseOfEndpointErrorOfListMembersOfGroupErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfListMembersOfGroupErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfListMembersOfGroupErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/ListMembersOfGroupErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "ListMembersOfGroupErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "GroupNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "GroupNotFound"
        ]
      },
      "ListMembersOfGroupResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberOfGroup"
            }
          },
          "cursor": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "MemberOfGroup": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypeEnum"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfGetGroupErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetGroupErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetGroupErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetGroupErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetGroupErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "GroupNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "GroupNotFound"
        ]
      },
      "GetGroupResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "groupId": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          },
          "numberSubGroups": {
            "type": "integer",
            "format": "int32"
          },
          "numberUsers": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfDeleteGroupErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfDeleteGroupErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfDeleteGroupErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/DeleteGroupErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "DeleteGroupErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "ErrorGeneratingPermissions",
          "GroupNotEmpty"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "ErrorGeneratingPermissions",
          "GroupNotEmpty"
        ]
      },
      "ErrorResponseOfEndpointErrorOfCreateGroupErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfCreateGroupErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfCreateGroupErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/CreateGroupErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "CreateGroupErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "ErrorGeneratingPermissions"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "ErrorGeneratingPermissions"
        ]
      },
      "CreateGroupResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "groupId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "CreateGroupRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "ownerId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfAdminQueryGroupsErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfAdminQueryGroupsErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfAdminQueryGroupsErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/AdminQueryGroupsErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "AdminQueryGroupsErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter"
        ]
      },
      "AdminQueryGroupsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupDtoLite"
            }
          },
          "cursor": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GroupDtoLite": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfAddMemberToGroupErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfAddMemberToGroupErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfAddMemberToGroupErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/AddMemberToGroupErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "AddMemberToGroupErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "ErrorModifyingPermissions",
          "MemberAlreadyInGroup",
          "GroupNotFound",
          "MemberNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "ErrorModifyingPermissions",
          "MemberAlreadyInGroup",
          "GroupNotFound",
          "MemberNotFound"
        ]
      },
      "AddMemberToGroupRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "groupId",
          "memberType",
          "memberId"
        ],
        "properties": {
          "memberType": {
            "nullable": false,
            "$ref": "#/components/schemas/MemberTypeEnum"
          },
          "memberId": {
            "type": "string",
            "format": "guid",
            "nullable": false
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfTokenErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfTokenErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfTokenErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/TokenErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "TokenErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "MissingRefreshToken",
          "NotAuthorized",
          "PasswordResetRequired",
          "UserNotConfirmed",
          "UserNotFound"
        ],
        "enum": [
          "Unspecified",
          "MissingRefreshToken",
          "NotAuthorized",
          "PasswordResetRequired",
          "UserNotConfirmed",
          "UserNotFound"
        ]
      },
      "AuthResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "challengeName": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "accessToken": {
            "type": "string"
          },
          "idToken": {
            "type": "string"
          },
          "tokenType": {
            "type": "string"
          },
          "expiresIn": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TokenRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "applicationType",
          "code",
          "codeVerifier",
          "grantType"
        ],
        "properties": {
          "code": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "codeVerifier": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "grantType": {
            "minLength": 1,
            "nullable": false,
            "$ref": "#/components/schemas/AppConstants_GrantType"
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AppConstants_GrantType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "AuthorizationCode",
          "RefreshToken"
        ],
        "enum": [
          "AuthorizationCode",
          "RefreshToken"
        ]
      },
      "ErrorResponseOfEndpointErrorOfSignUpErrorCodes": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfSignUpErrorCodes"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfSignUpErrorCodes": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/SignUpErrorCodes"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "SignUpErrorCodes": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "NotAuthorized",
          "InvalidPassword",
          "UserNameExists",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "NotAuthorized",
          "InvalidPassword",
          "UserNameExists",
          "InvalidParameter"
        ]
      },
      "SignUpRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "password",
          "email",
          "givenName",
          "phoneNumber"
        ],
        "properties": {
          "password": {
            "type": "string",
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{8,128}$",
            "nullable": false
          },
          "email": {
            "type": "string",
            "pattern": "^[^@]+@[^@]+$",
            "nullable": false
          },
          "givenName": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "familyName": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "nullable": false
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfSignInErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfSignInErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfSignInErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/SignInErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "SignInErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "NotAuthorized",
          "PasswordResetRequired",
          "UserNotConfirmed",
          "UserNotFound",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "NotAuthorized",
          "PasswordResetRequired",
          "UserNotConfirmed",
          "UserNotFound",
          "InvalidParameter"
        ]
      },
      "SignInRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "applicationType",
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "pattern": "^[^@]+@[^@]+$",
            "nullable": false
          },
          "password": {
            "type": "string",
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{8,128}$",
            "nullable": false
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfResendConfirmationCodeErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfResendConfirmationCodeErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfResendConfirmationCodeErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/ResendConfirmationCodeErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "ResendConfirmationCodeErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "UserNotFound",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "UserNotFound",
          "InvalidParameter"
        ]
      },
      "ResendCodeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[^@]+@[^@]+$",
            "nullable": false
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfLogoutErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfLogoutErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfLogoutErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/LogoutErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "LogoutErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "MissingRefreshToken",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "MissingRefreshToken",
          "InvalidParameter"
        ]
      },
      "LogoutRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfIdpsErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfIdpsErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfIdpsErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/IdpsErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "IdpsErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified"
        ],
        "enum": [
          "Unspecified"
        ]
      },
      "IdpsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "baseUrl": {
            "type": "string"
          },
          "redirectUri": {
            "type": "string"
          },
          "responseType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfForgotPasswordErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfForgotPasswordErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfForgotPasswordErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/ForgotPasswordErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "ForgotPasswordErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "UserNotFound",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "UserNotFound",
          "InvalidParameter"
        ]
      },
      "ForgotPasswordRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[^@]+@[^@]+$",
            "nullable": false
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfConfirmMfaErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfConfirmMfaErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfConfirmMfaErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/ConfirmMfaErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "ConfirmMfaErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "AliasExists",
          "CodeMismatch",
          "InvalidPassword",
          "MFAMethodNotFound",
          "PasswordResetRequired",
          "SoftwareTokenMFANotFound",
          "UserNotConfirmed",
          "UserNotFound",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "AliasExists",
          "CodeMismatch",
          "InvalidPassword",
          "MFAMethodNotFound",
          "PasswordResetRequired",
          "SoftwareTokenMFANotFound",
          "UserNotConfirmed",
          "UserNotFound",
          "InvalidParameter"
        ]
      },
      "ConfirmMfaRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "applicationType",
          "userId",
          "sessionId",
          "challengeCode",
          "challengeName"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "sessionId": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "challengeCode": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "challengeName": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "ErrorResponseOfConfirmForgotPasswordErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ConfirmForgotPasswordErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "ConfirmForgotPasswordErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "CodeMismatch",
          "ExpiredCode",
          "InvalidPassword",
          "TooManyFailedAttempts",
          "UserNotConfirmed",
          "UserNotFound",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "CodeMismatch",
          "ExpiredCode",
          "InvalidPassword",
          "TooManyFailedAttempts",
          "UserNotConfirmed",
          "UserNotFound",
          "InvalidParameter"
        ]
      },
      "ResetPasswordRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "email",
          "password",
          "code"
        ],
        "properties": {
          "email": {
            "type": "string",
            "pattern": "^[^@]+@[^@]+$",
            "nullable": false
          },
          "password": {
            "type": "string",
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{8,128}$",
            "nullable": false
          },
          "code": {
            "type": "string",
            "maxLength": 6,
            "minLength": 6,
            "nullable": false
          }
        }
      },
      "ErrorResponseOfConfirmEmailErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ConfirmEmailErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "ConfirmEmailErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "AliasExists",
          "CodeMismatch",
          "ExpiredCode",
          "TooManyFailedAttempts",
          "UserNotFound",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "AliasExists",
          "CodeMismatch",
          "ExpiredCode",
          "TooManyFailedAttempts",
          "UserNotFound",
          "InvalidParameter"
        ]
      },
      "ConfirmEmailRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "email",
          "code"
        ],
        "properties": {
          "email": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[^@]+@[^@]+$",
            "nullable": false
          },
          "code": {
            "type": "string",
            "maxLength": 6,
            "minLength": 6,
            "nullable": false
          }
        }
      },
      "ErrorResponseOfChangePasswordErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ChangePasswordErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "ChangePasswordErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "InvalidPassword",
          "PasswordResetRequired",
          "UserNotConfirmed",
          "UserNotFound",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "InvalidPassword",
          "PasswordResetRequired",
          "UserNotConfirmed",
          "UserNotFound",
          "InvalidParameter"
        ]
      },
      "ChangePasswordRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "currentPassword",
          "newPassword"
        ],
        "properties": {
          "currentPassword": {
            "type": "string",
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{8,128}$",
            "nullable": false
          },
          "newPassword": {
            "type": "string",
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{8,128}$",
            "nullable": false
          }
        }
      }
    },
    "securitySchemes": {
      "JWTBearerAuth": {
        "type": "http",
        "description": "Enter a JWT token to authorize the requests...",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
