{
  "x-generator": "NSwag v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Debos Api",
    "version": "v1.0"
  },
  "servers": [
    {
      "url": "https://api.dev.debos.ai"
    }
  ],
  "paths": {
    "/v1/users/{id}": {
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Updates a user and return the updated info",
        "operationId": "EndpointsFeaturesUsersEndpointsUpdateUserEndpoint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "requestBody": {
          "x-name": "UpdateUserRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfUpdateUserErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Updated user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a user",
        "operationId": "EndpointsFeaturesUsersEndpointsDeleteUserEndpoint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfDeleteUserErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "User deleted"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/users/by-email": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Returns a user id if the user with the given email exists",
        "operationId": "EndpointsFeaturesUsersEndpointsGetUserIdByEmailEndpoint",
        "parameters": [
          {
            "name": "Email",
            "in": "query",
            "required": true,
            "schema": {
              "title": "String",
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetUserIdByEmailErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "User Id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserIdByEmailResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/users/me": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get user information from user calling the endpoint",
        "operationId": "EndpointsFeaturesUsersEndpointsGetMeEndpoint",
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetMeErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "User information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Returns a list of users according to the specified criteria.",
        "operationId": "EndpointsFeaturesUsersEndpointsAdminQueryUsersEndpoint",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "LastName",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "Email",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "PhoneNumber",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "CursorDirection",
            "in": "query",
            "schema": {
              "title": "CursorDirectionEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "After",
                "Before"
              ],
              "enum": [
                "After",
                "Before"
              ]
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Int32",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfAdminQueryUsersErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminQueryUsersResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces/{SpaceId}": {
      "patch": {
        "tags": [
          "spaces"
        ],
        "summary": "Updates a space",
        "operationId": "EndpointsFeaturesSpacesEndpointsUpdateSpaceEndpoint",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "requestBody": {
          "x-name": "UpdateSpaceRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSpaceRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfUpdateSpaceErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Space updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSpaceRequest"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "spaces"
        ],
        "summary": "Returns a space as seen by the caller user",
        "operationId": "EndpointsFeaturesSpacesEndpointsGetSpaceEndpoint",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetSpaceErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "A space",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSpaceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces/{SpaceId}/modules/{ModuleType}": {
      "patch": {
        "tags": [
          "spaces"
        ],
        "summary": "Update module state in a space",
        "operationId": "EndpointsFeaturesSpacesEndpointsUpdateModuleInSpaceEndpoint",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "ModuleType",
            "in": "path",
            "required": true,
            "schema": {
              "title": "ModuleTypeEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "Invalid",
                "AccessMobile",
                "AccessParking",
                "AccessCardReader",
                "Bookings"
              ],
              "enum": [
                "Invalid",
                "AccessMobile",
                "AccessParking",
                "AccessCardReader",
                "Bookings"
              ]
            }
          }
        ],
        "requestBody": {
          "x-name": "UpdateServiceInSpaceRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServiceInSpaceRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfUpdateModuleInSpaceErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Module updated correctly"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "spaces"
        ],
        "summary": "Remove an existing module from a space",
        "operationId": "EndpointsFeaturesSpacesEndpointsRemoveModuleFromSpaceEndpoint",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "ModuleType",
            "in": "path",
            "required": true,
            "schema": {
              "title": "ModuleTypeEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "Invalid",
                "AccessMobile",
                "AccessParking",
                "AccessCardReader",
                "Bookings"
              ],
              "enum": [
                "Invalid",
                "AccessMobile",
                "AccessParking",
                "AccessCardReader",
                "Bookings"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfRemoveModuleFromSpaceErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Module removed correctly"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces/{SpaceId}/favourite": {
      "put": {
        "tags": [
          "spaces"
        ],
        "summary": "Sets the favourite status of a space",
        "operationId": "EndpointsFeaturesSpacesEndpointsSetFavouriteEndpoint",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "requestBody": {
          "x-name": "SetFavouriteSpaceRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetFavouriteSpaceRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfSetFavouriteErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Space favourite status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetFavouriteSpaceRequest"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces": {
      "get": {
        "tags": [
          "spaces"
        ],
        "summary": "Returns a list of spaces visible to the caller user",
        "operationId": "EndpointsFeaturesSpacesEndpointsGetSpacesEndpoint",
        "parameters": [
          {
            "name": "ParentSpaceId",
            "in": "query",
            "description": "Is Parent Space is null, only root spaces are returned",
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetSpacesErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of spaces",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSpacesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "spaces"
        ],
        "summary": "Creates a new space",
        "operationId": "EndpointsFeaturesSpacesEndpointsCreateSpaceEndpoint",
        "requestBody": {
          "x-name": "CreateSpaceRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSpaceRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfCreateSpaceErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Space created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSpaceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces/my-spaces": {
      "get": {
        "tags": [
          "spaces"
        ],
        "summary": "Returns the list of spaces owned by the caller user or the referenced organization (is user is an admin of that organization)",
        "operationId": "EndpointsFeaturesSpacesEndpointsGetMySpacesEndpoint",
        "parameters": [
          {
            "name": "SpaceType",
            "in": "query",
            "schema": {
              "title": "SpaceTypeEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "Invalid",
                "Undefined",
                "SmartCommunity",
                "Building",
                "Floor",
                "Apartment",
                "SwimmingPool",
                "Tennis",
                "Padel",
                "Football",
                "Basketball",
                "ParkingSpace",
                "ParkingLot",
                "StorageRoom",
                "BuildingPart",
                "Block",
                "Stairs",
                "Gym"
              ],
              "enum": [
                "Invalid",
                "Undefined",
                "SmartCommunity",
                "Building",
                "Floor",
                "Apartment",
                "SwimmingPool",
                "Tennis",
                "Padel",
                "Football",
                "Basketball",
                "ParkingSpace",
                "ParkingLot",
                "StorageRoom",
                "BuildingPart",
                "Block",
                "Stairs",
                "Gym"
              ]
            }
          },
          {
            "name": "ParentSpaceId",
            "in": "query",
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "RootSpaceId",
            "in": "query",
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetMySpacesErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of spaces",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMySpacesErrorCode"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces/favourites": {
      "get": {
        "tags": [
          "spaces"
        ],
        "summary": "List favourite spaces",
        "description": "Returns a list of favourite spaces according to the specified criteria",
        "operationId": "EndpointsFeaturesSpacesEndpointsGetMyFavouritesEndpoint",
        "parameters": [
          {
            "name": "SpaceType",
            "in": "query",
            "schema": {
              "title": "SpaceTypeEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "Invalid",
                "Undefined",
                "SmartCommunity",
                "Building",
                "Floor",
                "Apartment",
                "SwimmingPool",
                "Tennis",
                "Padel",
                "Football",
                "Basketball",
                "ParkingSpace",
                "ParkingLot",
                "StorageRoom",
                "BuildingPart",
                "Block",
                "Stairs",
                "Gym"
              ],
              "enum": [
                "Invalid",
                "Undefined",
                "SmartCommunity",
                "Building",
                "Floor",
                "Apartment",
                "SwimmingPool",
                "Tennis",
                "Padel",
                "Football",
                "Basketball",
                "ParkingSpace",
                "ParkingLot",
                "StorageRoom",
                "BuildingPart",
                "Block",
                "Stairs",
                "Gym"
              ]
            }
          },
          {
            "name": "ParentSpaceId",
            "in": "query",
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "RootSpaceId",
            "in": "query",
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "CursorDirection",
            "in": "query",
            "schema": {
              "title": "CursorDirectionEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "After",
                "Before"
              ],
              "enum": [
                "After",
                "Before"
              ]
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Int32",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetMyFavouriteSpacesErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of Spaces",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMyFavouriteSpacesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces/admin-query": {
      "get": {
        "tags": [
          "spaces"
        ],
        "summary": "Returns a list of Spaces according to the specified criteria.",
        "operationId": "EndpointsFeaturesSpacesEndpointsAdminQuerySpacesEndpoint",
        "parameters": [
          {
            "name": "SpaceName",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "MemberId",
            "in": "query",
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "OwnerType",
            "in": "query",
            "schema": {
              "title": "OwnerTypeEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "Invalid",
                "User",
                "Organization"
              ],
              "enum": [
                "Invalid",
                "User",
                "Organization"
              ]
            }
          },
          {
            "name": "OwnerId",
            "in": "query",
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "SpaceType",
            "in": "query",
            "schema": {
              "title": "SpaceTypeEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "Invalid",
                "Undefined",
                "SmartCommunity",
                "Building",
                "Floor",
                "Apartment",
                "SwimmingPool",
                "Tennis",
                "Padel",
                "Football",
                "Basketball",
                "ParkingSpace",
                "ParkingLot",
                "StorageRoom",
                "BuildingPart",
                "Block",
                "Stairs",
                "Gym"
              ],
              "enum": [
                "Invalid",
                "Undefined",
                "SmartCommunity",
                "Building",
                "Floor",
                "Apartment",
                "SwimmingPool",
                "Tennis",
                "Padel",
                "Football",
                "Basketball",
                "ParkingSpace",
                "ParkingLot",
                "StorageRoom",
                "BuildingPart",
                "Block",
                "Stairs",
                "Gym"
              ]
            }
          },
          {
            "name": "ParentSpaceId",
            "in": "query",
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "RootSpaceId",
            "in": "query",
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "CursorDirection",
            "in": "query",
            "schema": {
              "title": "CursorDirectionEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "After",
                "Before"
              ],
              "enum": [
                "After",
                "Before"
              ]
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Int32",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfAdminQuerySpacesErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of Spaces",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminQuerySpacesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces/{SpaceId}/modules": {
      "post": {
        "tags": [
          "spaces"
        ],
        "summary": "Add a new module to a space. By default, the module will be added in disable state",
        "operationId": "EndpointsFeaturesSpacesEndpointsAddModuleToSpaceEndpoint",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "requestBody": {
          "x-name": "AddModuleToSpaceRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddModuleToSpaceRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfAddModuleToSpaceErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Module added correctly"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/permissions/regenerate": {
      "post": {
        "tags": [
          "permissions"
        ],
        "summary": "Regenerates default permissions for a user",
        "description": "Regenerates default permissions for a user",
        "operationId": "EndpointsFeaturesPermissionsEndpointsRegenerateEndpoint",
        "requestBody": {
          "x-name": "RegeneratePermissionsForUserRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegeneratePermissionsForUserRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfRegeneratePermissionErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "The permissions were generated successfully"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/permissions/regenerate-for-all": {
      "post": {
        "tags": [
          "permissions"
        ],
        "summary": "Regenerates default permissions for all users",
        "description": "Regenerates default permissions for all users",
        "operationId": "EndpointsFeaturesPermissionsEndpointsRegenerateForAllEndpoint",
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfRegeneratePermissionErrorCode2"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "The permissions were generated successfully"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/permissions/by-grantee": {
      "get": {
        "tags": [
          "permissions"
        ],
        "summary": "List permissions for a given grantee according to the given criteria",
        "description": "List permissions for a given grantee",
        "operationId": "EndpointsFeaturesPermissionsEndpointsListByGranteeEndpoint",
        "parameters": [
          {
            "name": "GranteeId",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "AppHolder",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "ContextType",
            "in": "query",
            "required": true,
            "schema": {
              "title": "ContextTypeEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "invalid",
                "space",
                "user",
                "group"
              ],
              "enum": [
                "invalid",
                "space",
                "user",
                "group"
              ]
            }
          },
          {
            "name": "Context",
            "in": "query",
            "required": true,
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "ResourceType",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "Action",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfListByGranteePermissionErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPermissionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/permissions/by-context": {
      "get": {
        "tags": [
          "permissions"
        ],
        "summary": "List permissions for a given context according to the given criteria",
        "description": "List permissions for a given context",
        "operationId": "EndpointsFeaturesPermissionsEndpointsListByContextEndpoint",
        "parameters": [
          {
            "name": "ContextType",
            "in": "query",
            "required": true,
            "schema": {
              "title": "ContextTypeEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "invalid",
                "space",
                "user",
                "group"
              ],
              "enum": [
                "invalid",
                "space",
                "user",
                "group"
              ]
            }
          },
          {
            "name": "Context",
            "in": "query",
            "required": true,
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "ResourceType",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "Action",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "ActionObject",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "CursorDirection",
            "in": "query",
            "schema": {
              "title": "CursorDirectionEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "After",
                "Before"
              ],
              "enum": [
                "After",
                "Before"
              ]
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Int32",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfListByContextPermissionErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPermissionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/permissions": {
      "delete": {
        "tags": [
          "permissions"
        ],
        "summary": "Deletes a permission",
        "description": "Deletes a permission",
        "operationId": "EndpointsFeaturesPermissionsEndpointsDeleteEndpoint",
        "requestBody": {
          "x-name": "DeletePermissionRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePermissionRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfDeletePermissionErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "The permission was deleted"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "permissions"
        ],
        "summary": "Creates a permission as admin",
        "description": "Creates a permission as admin",
        "operationId": "EndpointsFeaturesPermissionsEndpointsCreateEndpoint",
        "requestBody": {
          "x-name": "CreatePermissionRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePermissionRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfCreatePermissionErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "The permission was created"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/organizations/{OrganizationId}": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "Returns an organization by id",
        "operationId": "EndpointsFeaturesOrganizationsEndpointsGetOrganizationEndpoint",
        "parameters": [
          {
            "name": "OrganizationId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetOrganizationErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Organization found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrganizationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "organizations"
        ],
        "summary": "Deletes an organization",
        "operationId": "EndpointsFeaturesOrganizationsEndpointsDeleteOrganizationEndpoint",
        "parameters": [
          {
            "name": "OrganizationId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfDeleteOrganizationErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Organization deleted successfully"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/organizations/my-organizations": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "Returns a list of organizations belonging to the caller user",
        "operationId": "EndpointsFeaturesOrganizationsEndpointsGetMyOrganizationsEndpoint",
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetMyOrganizationsErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of organizations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMyOrganizationsErrorCode"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/organizations": {
      "post": {
        "tags": [
          "organizations"
        ],
        "summary": "Creates a new organization",
        "operationId": "EndpointsFeaturesOrganizationsEndpointsCreateOrganizationEndpoint",
        "requestBody": {
          "x-name": "CreateOrganizationRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfCreateOrganizationErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Organization created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrganizationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "Returns a list of organizations according to the specified criteria.",
        "operationId": "EndpointsFeaturesOrganizationsEndpointsAdminQueryOrganizationsEndpoint",
        "parameters": [
          {
            "name": "OrganizationName",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "OwnerId",
            "in": "query",
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "CursorDirection",
            "in": "query",
            "schema": {
              "title": "CursorDirectionEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "After",
                "Before"
              ],
              "enum": [
                "After",
                "Before"
              ]
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Int32",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfAdminQueryOrganizationsErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of organizations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminQueryOrganizationsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/iot/gateways/legacygateways": {
      "post": {
        "tags": [
          "iot"
        ],
        "summary": "Creates legacy gateways in the system",
        "description": "Creates (adds) a list of legacy gateways to the system",
        "operationId": "EndpointsFeaturesIoTEndpointsAdminCreateLegacyGatewayEndpoint",
        "requestBody": {
          "x-name": "CreateLegacyGatewaysRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLegacyGatewaysRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfCreateLegacyGatewaysErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Legacy gateways created (added) successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLegacyGatewaysResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces/{SpaceId}/gateways": {
      "post": {
        "tags": [
          "spaces"
        ],
        "summary": "Add or removes a gateway to/from space",
        "description": "Add or removes a gateway to/from a space",
        "operationId": "PostEndpointsFeaturesIoTEndpointsAddGatewayToSpaceEndpoint",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "requestBody": {
          "x-name": "AddOrRemoveGatewayToSpaceRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOrRemoveGatewayToSpaceRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfAddOrRemoveGatewayToSpaceErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Gateway successfully added o removed to space"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "spaces"
        ],
        "summary": "Add or removes a gateway to/from space",
        "description": "Add or removes a gateway to/from a space",
        "operationId": "DeleteEndpointsFeaturesIoTEndpointsAddGatewayToSpaceEndpoint",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "requestBody": {
          "x-name": "AddOrRemoveGatewayToSpaceRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOrRemoveGatewayToSpaceRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfAddOrRemoveGatewayToSpaceErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Gateway successfully added o removed to space"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/groups/{GroupId}/members": {
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Removes a member from a group",
        "operationId": "EndpointsFeaturesGroupsEndpointsRemoveMemberFromGroupEndpoint",
        "parameters": [
          {
            "name": "GroupId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "requestBody": {
          "x-name": "RemoveMemberFromGroupRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveMemberFromGroupRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfRemoveMemberFromGroupErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Member removed successfully"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "List members of a group",
        "operationId": "EndpointsFeaturesGroupsEndpointsListMembersOfGroupEndpoint",
        "parameters": [
          {
            "name": "GroupId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "MemberType",
            "in": "query",
            "required": true,
            "schema": {
              "title": "MemberTypeEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "Invalid",
                "Group",
                "User"
              ],
              "enum": [
                "Invalid",
                "Group",
                "User"
              ]
            }
          },
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "CursorDirection",
            "in": "query",
            "schema": {
              "title": "CursorDirectionEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "After",
                "Before"
              ],
              "enum": [
                "After",
                "Before"
              ]
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Int32",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfListMembersOfGroupErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of members",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMembersOfGroupResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Adds a member to a group",
        "operationId": "EndpointsFeaturesGroupsEndpointsAddMemberToGroupEndpoint",
        "parameters": [
          {
            "name": "GroupId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "requestBody": {
          "x-name": "AddMemberToGroupRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMemberToGroupRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfAddMemberToGroupErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Member added successfully"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/groups/{GroupId}": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Returns a group by id",
        "operationId": "EndpointsFeaturesGroupsEndpointsGetGroupEndpoint",
        "parameters": [
          {
            "name": "GroupId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetGroupErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Group found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGroupResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Deletes a group",
        "operationId": "EndpointsFeaturesGroupsEndpointsDeleteGroupEndpoint",
        "parameters": [
          {
            "name": "GroupId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfDeleteGroupErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Group deleted successfully"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/groups": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Returns a list of groups visible to the caller user",
        "operationId": "EndpointsFeaturesGroupsEndpointsGetGroupsEndpoint",
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetGroupsErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of groups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGroupsErrorCode"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Creates a new group",
        "operationId": "EndpointsFeaturesGroupsEndpointsCreateGroupEndpoint",
        "requestBody": {
          "x-name": "CreateGroupRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfCreateGroupErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Group created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGroupResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/groups/admin-query": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Returns a list of groups according to the specified criteria.",
        "operationId": "EndpointsFeaturesGroupsEndpointsAdminQueryGroupsEndpoint",
        "parameters": [
          {
            "name": "GroupName",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "MemberType",
            "in": "query",
            "schema": {
              "title": "MemberTypeEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "Invalid",
                "Group",
                "User"
              ],
              "enum": [
                "Invalid",
                "Group",
                "User"
              ]
            }
          },
          {
            "name": "MemberId",
            "in": "query",
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "MemberUserEmail",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "OwnerType",
            "in": "query",
            "schema": {
              "title": "OwnerTypeEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "Invalid",
                "User",
                "Organization"
              ],
              "enum": [
                "Invalid",
                "User",
                "Organization"
              ]
            }
          },
          {
            "name": "OwnerId",
            "in": "query",
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "OwnerUserEmail",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "CursorDirection",
            "in": "query",
            "schema": {
              "title": "CursorDirectionEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "After",
                "Before"
              ],
              "enum": [
                "After",
                "Before"
              ]
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Int32",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfAdminQueryGroupsErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of groups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminQueryGroupsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/health": {
      "get": {
        "tags": [
          "health"
        ],
        "operationId": "EndpointsFeaturesCommonEndpointsHealthEndpoint",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/debug": {
      "get": {
        "tags": [
          "debug"
        ],
        "operationId": "EndpointsFeaturesCommonEndpointsDebugEndpoint",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/bookings/time-slots": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Get Time Slots",
        "description": "Retrieves the booking time slots for a given space and date range",
        "operationId": "EndpointsFeaturesBookingsEndpointsGetTimeSlotsEndpoint1",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "required": true,
            "schema": {
              "title": "DateOnly",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "NumberOfDays",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Int32",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetTimeSlotsErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of time slots",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSlotsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces/{SpaceId}/bookings/time-slots": {
      "get": {
        "tags": [
          "spaces"
        ],
        "summary": "Get Time Slots",
        "description": "Retrieves the booking time slots for a given space and date range",
        "operationId": "EndpointsFeaturesBookingsEndpointsGetTimeSlotsEndpoint2",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "required": true,
            "schema": {
              "title": "DateOnly",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "NumberOfDays",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Int32",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetTimeSlotsErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of time slots",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSlotsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "spaces"
        ],
        "summary": "Generate TimeSlots",
        "description": "Creates a number of time slots based on the given configuration for the given date range.",
        "operationId": "EndpointsFeaturesBookingsEndpointsGenerateTimeSlotsEndpoint",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "requestBody": {
          "x-name": "GenerateTimeSlotsRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateTimeSlotsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGenerateTimeSlotsErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Number of generated time slots",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateTimeSlotsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/users/me/bookings": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Returns bookings for user",
        "description": "Returns a list of bookings for user in a given space or all spaces",
        "operationId": "EndpointsFeaturesBookingsEndpointsGetMyBookingsEndpoint",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "query",
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "required": true,
            "schema": {
              "title": "DateOnly",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "required": true,
            "schema": {
              "title": "DateOnly",
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetBookingsErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of bookings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBookingsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/bookings/configurations/by-id": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Returns a booking configuration",
        "description": "Returns a booking configuration",
        "operationId": "EndpointsFeaturesBookingsEndpointsGetBookingConfigurationEndpoint1",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "BookingConfigurationId",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetBookingConfigurationErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "A Booking configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBookingConfigurationErrorCode"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces/{SpaceId}/bookings/configurations/{BookingConfigurationId}": {
      "get": {
        "tags": [
          "spaces"
        ],
        "summary": "Returns a booking configuration",
        "description": "Returns a booking configuration",
        "operationId": "EndpointsFeaturesBookingsEndpointsGetBookingConfigurationEndpoint2",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "BookingConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetBookingConfigurationErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "A Booking configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBookingConfigurationErrorCode"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/bookings/configurations": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "Returns booking configurations in the space",
        "description": "Returns a list of booking configurations present in the space",
        "operationId": "EndpointsFeaturesBookingsEndpointsGetBookingConfigurationsEndpoint1",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "required": true,
            "schema": {
              "title": "DateOnly",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "required": true,
            "schema": {
              "title": "DateOnly",
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetBookingConfigurationsErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of booking configurations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBookingConfigurationsErrorCode"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces/{SpaceId}/bookings/configurations": {
      "get": {
        "tags": [
          "spaces"
        ],
        "summary": "Returns booking configurations in the space",
        "description": "Returns a list of booking configurations present in the space",
        "operationId": "EndpointsFeaturesBookingsEndpointsGetBookingConfigurationsEndpoint2",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "required": true,
            "schema": {
              "title": "DateOnly",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "required": true,
            "schema": {
              "title": "DateOnly",
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetBookingConfigurationsErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of booking configurations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBookingConfigurationsErrorCode"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "spaces"
        ],
        "summary": "Creates a new booking configuration",
        "description": "Creates a new booking configuration on the specified space",
        "operationId": "EndpointsFeaturesBookingsEndpointsCreateBookingConfigurationEndpoint",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "requestBody": {
          "x-name": "CreateBookingConfigurationRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookingConfigurationRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfCreateBookingConfigurationErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Booking configuration created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBookingConfigurationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces/{SpaceId}/bookings/{BookingId}": {
      "delete": {
        "tags": [
          "spaces"
        ],
        "summary": "Delete booking",
        "description": "Deletes a booking on the specified space",
        "operationId": "EndpointsFeaturesBookingsEndpointsDeleteBookingEndpoint1",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "BookingId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfDeleteBookingErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Booking deleted successfully"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/bookings/{BookingId}": {
      "delete": {
        "tags": [
          "bookings"
        ],
        "summary": "Delete booking",
        "description": "Deletes a booking on the specified space",
        "operationId": "EndpointsFeaturesBookingsEndpointsDeleteBookingEndpoint2",
        "parameters": [
          {
            "name": "BookingId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfDeleteBookingErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Booking deleted successfully"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/bookings": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Creates New booking",
        "description": "Creates a new booking on the specified space",
        "operationId": "EndpointsFeaturesBookingsEndpointsCreateBookingEndpoint1",
        "requestBody": {
          "x-name": "CreateBookingRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookingRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfCreateBookingErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Booking created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBookingResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces/{SpaceId}/bookings": {
      "post": {
        "tags": [
          "spaces"
        ],
        "summary": "Creates New booking",
        "description": "Creates a new booking on the specified space",
        "operationId": "EndpointsFeaturesBookingsEndpointsCreateBookingEndpoint2",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "requestBody": {
          "x-name": "CreateBookingRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookingRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfCreateBookingErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Booking created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBookingResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces/{SpaceId}/bookings/time-slots/admin-query": {
      "get": {
        "tags": [
          "spaces"
        ],
        "summary": "Admin Query Time Slots",
        "description": "Returns a list of timeslots according to the specified criteria.",
        "operationId": "EndpointsFeaturesBookingsEndpointsAdminQueryTimeSlotsEndpoint",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "required": true,
            "schema": {
              "title": "DateOnly",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "NumberOfDays",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Int32",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfAdminQueryTimeSlotsErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of time slots",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminQueryTimeSlotsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces/{SpaceId}/bookings/admin-query": {
      "get": {
        "tags": [
          "spaces"
        ],
        "summary": "Admin query bookings",
        "description": "Returns a list of bookings according to the specified criteria.",
        "operationId": "EndpointsFeaturesBookingsEndpointsAdminQueryBookingsEndpoint",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "schema": {
              "title": "DateOnly",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "schema": {
              "title": "DateOnly",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "CursorDirection",
            "in": "query",
            "schema": {
              "title": "CursorDirectionEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "After",
                "Before"
              ],
              "enum": [
                "After",
                "Before"
              ]
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Int32",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfAdminQueryBookingsErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of bookings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminQueryBookingsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/auth/token": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Returns access token",
        "operationId": "EndpointsFeaturesAuthEndpointsTokenEndpoint",
        "parameters": [
          {
            "name": "x-application-type",
            "in": "header",
            "required": true,
            "schema": {
              "title": "String",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "x-name": "TokenRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfTokenErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Returns JWT tokens",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/signup": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Creates a new user account",
        "operationId": "EndpointsFeaturesAuthEndpointsSignUpEndpoint",
        "requestBody": {
          "x-name": "SignUpRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfSignUpErrorCodes"
                }
              }
            }
          },
          "200": {
            "description": "Returns tokens and user information or Mfa Challenge",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/signin": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Authenticates a user",
        "description": "Authenticates a user. Returns JWT tokens or Mfa Challenge",
        "operationId": "EndpointsFeaturesAuthEndpointsSignInEndpoint",
        "parameters": [
          {
            "name": "x-application-type",
            "in": "header",
            "required": true,
            "schema": {
              "title": "String",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "x-name": "SignInRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfSignInErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Returns tokens and user information or Mfa Challenge",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/resend-confirmation-code": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Resends email confirmation code",
        "operationId": "EndpointsFeaturesAuthEndpointsResendConfirmationCodeEndpoint",
        "requestBody": {
          "x-name": "ResendCodeRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendCodeRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfResendConfirmationCodeErrorCode"
                }
              }
            }
          },
          "200": {
            "description": "Code has been resent to the user"
          }
        }
      }
    },
    "/v1/auth/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logout a user",
        "description": "Logout a user. Refresh token should be sent in the request body or as a cookie",
        "operationId": "EndpointsFeaturesAuthEndpointsLogoutEndpoint",
        "requestBody": {
          "x-name": "LogoutRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfLogoutErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "User has been logged out successfully"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/auth/idps": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Returns the list of available identity providers",
        "operationId": "EndpointsFeaturesAuthEndpointsIdpsEndpoint",
        "parameters": [
          {
            "name": "x-application-type",
            "in": "header",
            "required": true,
            "schema": {
              "title": "String",
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfIdpsErrorCode"
                }
              }
            }
          },
          "200": {
            "description": "List of available identity providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdpsResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/forgot-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Starts a password reset process",
        "operationId": "EndpointsFeaturesAuthEndpointsForgotPasswordEndpoint",
        "requestBody": {
          "x-name": "ForgotPasswordRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfForgotPasswordErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Password recovery started successfully"
          }
        }
      }
    },
    "/v1/auth/confirm-mfa": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Validates MFA code",
        "operationId": "EndpointsFeaturesAuthEndpointsConfirmMfaEndpoint",
        "parameters": [
          {
            "name": "x-application-type",
            "in": "header",
            "required": true,
            "schema": {
              "title": "String",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "x-name": "ConfirmMfaRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmMfaRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfConfirmMfaErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "MFA Code has been validated and tokens are returned in the response. Refresh token is returned in body or cookie",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/confirm-forgot-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Confirm a recovery password procedure with provided code",
        "operationId": "EndpointsFeaturesAuthEndpointsConfirmForgotPasswordEndpoint",
        "requestBody": {
          "x-name": "ResetPasswordRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfConfirmForgotPasswordErrorCode"
                }
              }
            }
          },
          "200": {
            "description": "Password has been changed"
          }
        }
      }
    },
    "/v1/auth/confirm-email": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Confirm the sign up of a user with a confirmation code.",
        "operationId": "EndpointsFeaturesAuthEndpointsConfirmEmailEndpoint",
        "requestBody": {
          "x-name": "ConfirmEmailRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmEmailRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfConfirmEmailErrorCode"
                }
              }
            }
          },
          "200": {
            "description": "Email confirmed."
          }
        }
      }
    },
    "/v1/auth/change-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Changes user's password",
        "operationId": "EndpointsFeaturesAuthEndpointsChangePasswordEndpoint",
        "requestBody": {
          "x-name": "ChangePasswordRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfChangePasswordErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Password changed successfully"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/applications": {
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Creates a new Application",
        "operationId": "EndpointsFeaturesApplicationsEndpointsCreateApplicationEndpoint",
        "requestBody": {
          "x-name": "CreateApplicationRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApplicationRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfCreateApplicationErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Application created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateApplicationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/users/me/access-means": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get my access means",
        "description": "Returns a list of access means (cards, dongles, etc) belonging to the caller",
        "operationId": "EndpointsFeaturesAccessEndpointsGetMyAccessMeansEndpoint",
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetMyAccessMeansErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of Access Means",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMyAccessMeansResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces/{SpaceId}/access-points/{AccessPointId}": {
      "get": {
        "tags": [
          "spaces"
        ],
        "summary": "Describe Access point",
        "description": "Returns an access point",
        "operationId": "EndpointsFeaturesAccessEndpointsGetAccessPointEndpoint",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "AccessPointId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetAccessPointErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "An access point",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccessPointResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces/{SpaceId}/access-points": {
      "get": {
        "tags": [
          "spaces"
        ],
        "summary": "List of visible access points",
        "description": "Returns a list of access points visible to the caller user in the specified space",
        "operationId": "EndpointsFeaturesAccessEndpointsGetAccessPointsEndpoint",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetAccessPointsErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of access points",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccessPointsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "spaces"
        ],
        "summary": "Creates Access Point",
        "description": "Creates a new Access Point in a Space",
        "operationId": "EndpointsFeaturesAccessEndpointsCreateAccessPointEndpoint",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "requestBody": {
          "x-name": "CreateAccessPointRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccessPointRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfCreateAccessPointErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "AccessPoint created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAccessPointResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/access/access-means/{AccessMeanId}": {
      "get": {
        "tags": [
          "access"
        ],
        "summary": "Get access mean by id",
        "description": "Returns an access mean (cards, dongles, etc)",
        "operationId": "EndpointsFeaturesAccessEndpointsGetAccessMeanEndpoint",
        "parameters": [
          {
            "name": "AccessMeanId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetAccessMeanErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "The Access Mean",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccessMeanResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces/{SpaceId}/access-points/{AccessPointId}/keys": {
      "get": {
        "tags": [
          "spaces"
        ],
        "summary": "Get my access keys for an access point",
        "description": "Returns a list of access keys available for the caller in the specified access point with their time ranges.",
        "operationId": "EndpointsFeaturesAccessEndpointsGetAccessKeysEndpoint",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "AccessPointId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGetAccessKeysErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of Access Keys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccessKeysErrorCode"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "spaces"
        ],
        "summary": "Creates a key from an access mean",
        "description": "Creates a key from an access mean",
        "operationId": "EndpointsFeaturesAccessEndpointsGenerateKeyEndpoint",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "AccessPointId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "requestBody": {
          "x-name": "GenerateKeyRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateKeyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfGenerateKeyErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Key generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateKeyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces/{SpaceId}/access-points/{AccessPointId}/keys/{AccessKeyId}": {
      "delete": {
        "tags": [
          "spaces"
        ],
        "summary": "Deletes a key from an access mean",
        "description": "Deletes a key from an access mean in a given access point",
        "operationId": "EndpointsFeaturesAccessEndpointsDeleteKeyEndpoint",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "AccessPointId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "AccessKeyId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfDeleteKeyErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Key deleted successfully"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/access/access-means/smartphones": {
      "post": {
        "tags": [
          "access"
        ],
        "summary": "Creates bluetooth dongles in the system",
        "description": "Creates (adds) a list of access means (bluetooth dongles) to the system",
        "operationId": "EndpointsFeaturesAccessEndpointsCreateSmartPhoneEndpoint",
        "requestBody": {
          "x-name": "CreateSmartPhoneRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSmartPhoneRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfCreateSmartPhoneErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Access means created (added) successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSmartPhoneResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/spaces/{SpaceId}/access-points/{AccessPointId}/lock": {
      "post": {
        "tags": [
          "spaces"
        ],
        "summary": "Creates a lock in a Space attached to a Legacy gateway",
        "description": "Creates a new Access Point in a Space",
        "operationId": "EndpointsFeaturesAccessEndpointsCreateLegacyRelayLockEndpoint",
        "parameters": [
          {
            "name": "SpaceId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "AccessPointId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "requestBody": {
          "x-name": "CreateLegacyRelayLockRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLegacyRelayLockRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfCreateLegacyRelayLockErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "AccessPoint created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLegacyRelayLockResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/access/access-means/{AccessMeanId}/associated-user": {
      "post": {
        "tags": [
          "access"
        ],
        "summary": "Associate Access Mean To User",
        "description": "Associate an access mean to a user so that the user can generate keys and use it to access the system",
        "operationId": "EndpointsFeaturesAccessEndpointsAssociateAccessMeanToUserEndpoint1",
        "parameters": [
          {
            "name": "AccessMeanId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "requestBody": {
          "x-name": "AssociateAccessMeanToUserRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociateAccessMeanToUserRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfAssociateAccessMeanToUserErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Access mean associated to user"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/users/{UserId}/access-means": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Associate Access Mean To User",
        "description": "Associate an access mean to a user so that the user can generate keys and use it to access the system",
        "operationId": "EndpointsFeaturesAccessEndpointsAssociateAccessMeanToUserEndpoint2",
        "parameters": [
          {
            "name": "UserId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          }
        ],
        "requestBody": {
          "x-name": "AssociateAccessMeanToUserRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociateAccessMeanToUserRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfAssociateAccessMeanToUserErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Access mean associated to user"
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/access/access-means/admin-query": {
      "get": {
        "tags": [
          "access"
        ],
        "summary": "Admin query of access means",
        "description": "Returns a list of access means (cards, dongles, etc) according to the specified criteria.",
        "operationId": "EndpointsFeaturesAccessEndpointsAdminQueryAccessMeansEndpoint",
        "parameters": [
          {
            "name": "IgnoreUser",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Boolean",
              "type": "boolean"
            }
          },
          {
            "name": "AssignedUserId",
            "in": "query",
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "AccessMeanType",
            "in": "query",
            "schema": {
              "title": "AccessMeanTypeEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "Invalid",
                "MiFareClassicCard",
                "BluetoothDongle"
              ],
              "enum": [
                "Invalid",
                "MiFareClassicCard",
                "BluetoothDongle"
              ]
            }
          },
          {
            "name": "InUseInAccessPointId",
            "in": "query",
            "schema": {
              "title": "Guid",
              "type": "string",
              "format": "guid"
            }
          },
          {
            "name": "Cursor",
            "in": "query",
            "schema": {
              "title": "String",
              "type": "string"
            }
          },
          {
            "name": "CursorDirection",
            "in": "query",
            "schema": {
              "title": "CursorDirectionEnum",
              "type": "string",
              "description": "",
              "x-enumNames": [
                "After",
                "Before"
              ],
              "enum": [
                "After",
                "Before"
              ]
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Int32",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfAdminQueryAccessMeansErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of Access Means",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminQueryAccessMeansResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/access/access-means/mifareclassic-cards": {
      "post": {
        "tags": [
          "access"
        ],
        "summary": "Creates mifare classic cards in the system",
        "description": "Creates (adds) a list of mifare classic cards to the system",
        "operationId": "EndpointsFeaturesAccessEndpointsAdminCreateMiFareClassicCardsEndpoint",
        "requestBody": {
          "x-name": "CreateMiFareClassicCardsRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMiFareClassicCardsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfCreateMiFareClassicCardsErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "MiFareClassicCards created (added) successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMiFareClassicCardsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    },
    "/v1/access/access-means/bluetooth-dongles": {
      "post": {
        "tags": [
          "access"
        ],
        "summary": "Creates bluetooth dongles in the system",
        "description": "Creates (adds) a list of access means (bluetooth dongles) to the system",
        "operationId": "EndpointsFeaturesAccessEndpointsAdminCreateBluetoothDonglesEndpoint",
        "requestBody": {
          "x-name": "CreateBluetoothDonglesRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBluetoothDonglesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Bad Request. Either a validation or a general problem has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseOfEndpointErrorOfCreateBluetoothDonglesErrorCode"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized. The user doesn't have the required permissions for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "200": {
            "description": "Access means created (added) successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBluetoothDonglesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponseOfEndpointErrorOfUpdateUserErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfUpdateUserErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfUpdateUserErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/UpdateUserErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "UpdateUserErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "UserNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "UserNotFound"
        ]
      },
      "ValidationFailure": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "propertyName": {
            "type": "string",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "attemptedValue": {
            "nullable": true
          },
          "customState": {
            "nullable": true
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "errorCode": {
            "type": "string",
            "nullable": true
          },
          "formattedMessagePlaceholderValues": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {}
          }
        }
      },
      "Severity": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Error",
          "Warning",
          "Info"
        ],
        "enum": [
          "Error",
          "Warning",
          "Info"
        ]
      },
      "UnAuthorizedResponse": {
        "type": "object",
        "description": "The response sent when 403 error is returned",
        "additionalProperties": false,
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message"
          },
          "missingPermission": {
            "description": "The missing permission",
            "oneOf": [
              {
                "$ref": "#/components/schemas/MissingPermission"
              }
            ]
          },
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          }
        }
      },
      "MissingPermission": {
        "type": "object",
        "description": "Data about the missing permission. Serializable to the client",
        "additionalProperties": false,
        "properties": {
          "contextType": {
            "type": "string",
            "description": "Context type"
          },
          "context": {
            "type": "string",
            "description": "Context of the permission"
          },
          "action": {
            "type": "string",
            "description": "Action of the permission"
          },
          "actionObject": {
            "type": "string",
            "description": "Object associated with the action, if any",
            "nullable": true
          },
          "details": {
            "type": "string",
            "description": "Details about the missing permission and why it is missing or limited",
            "nullable": true
          }
        }
      },
      "GetUserResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "idCard": {
            "type": "string",
            "nullable": true
          },
          "passport": {
            "type": "string",
            "nullable": true
          },
          "mobilePhone": {
            "type": "string",
            "nullable": true
          },
          "mobilePhoneCountryISOCode": {
            "type": "string",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "nullable": true
          },
          "apple": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "google": {
            "type": "string",
            "nullable": true
          },
          "gitHub": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "idCard": {
            "type": "string",
            "nullable": true
          },
          "passport": {
            "type": "string",
            "nullable": true
          },
          "mobilePhone": {
            "type": "string",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "nullable": true
          },
          "mobilePhoneCountryISOCode": {
            "type": "string",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "nullable": true
          },
          "apple": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "google": {
            "type": "string",
            "nullable": true
          },
          "gitHub": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfGetUserIdByEmailErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetUserIdByEmailErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetUserIdByEmailErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetUserIdByEmailErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetUserIdByEmailErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter",
          "UserNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter",
          "UserNotFound"
        ]
      },
      "GetUserIdByEmailResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "userId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfGetMeErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetMeErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetMeErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetMeErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetMeErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "UserNotFound",
          "InvalidId"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "UserNotFound",
          "InvalidId"
        ]
      },
      "ErrorResponseOfEndpointErrorOfDeleteUserErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfDeleteUserErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfDeleteUserErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/DeleteUserErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "DeleteUserErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "UserNotFound",
          "FailedToDeleteUserInAuthorizationService"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "UserNotFound",
          "FailedToDeleteUserInAuthorizationService"
        ]
      },
      "ErrorResponseOfEndpointErrorOfAdminQueryUsersErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfAdminQueryUsersErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfAdminQueryUsersErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/AdminQueryUsersErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "AdminQueryUsersErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter"
        ]
      },
      "AdminQueryUsersResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDto"
            }
          },
          "cursor": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UserDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "mobilePhone": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfUpdateSpaceErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfUpdateSpaceErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "CursorDirectionEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "After",
          "Before"
        ],
        "enum": [
          "After",
          "Before"
        ]
      },
      "EndpointErrorOfUpdateSpaceErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/UpdateSpaceErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "UpdateSpaceErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "ErrorGeneratingPermissions",
          "ParentSpaceHasNoSecurityGroups"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "ErrorGeneratingPermissions",
          "ParentSpaceHasNoSecurityGroups"
        ]
      },
      "UpdateSpaceRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "spaceId",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "spaceType": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/SpaceTypeEnum"
              }
            ]
          },
          "peopleCapacity": {
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "nullable": true,
            "exclusiveMinimum": true
          },
          "address": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AddressDto"
              }
            ]
          }
        }
      },
      "SpaceTypeEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Invalid",
          "Undefined",
          "SmartCommunity",
          "Building",
          "Floor",
          "Apartment",
          "SwimmingPool",
          "Tennis",
          "Padel",
          "Football",
          "Basketball",
          "ParkingSpace",
          "ParkingLot",
          "StorageRoom",
          "BuildingPart",
          "Block",
          "Stairs",
          "Gym"
        ],
        "enum": [
          "Invalid",
          "Undefined",
          "SmartCommunity",
          "Building",
          "Floor",
          "Apartment",
          "SwimmingPool",
          "Tennis",
          "Padel",
          "Football",
          "Basketball",
          "ParkingSpace",
          "ParkingLot",
          "StorageRoom",
          "BuildingPart",
          "Block",
          "Stairs",
          "Gym"
        ]
      },
      "AddressDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "street": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfUpdateModuleInSpaceErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfUpdateModuleInSpaceErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfUpdateModuleInSpaceErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/UpdateModuleInSpaceErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "UpdateModuleInSpaceErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter",
          "ModuleNotPresentInSpace"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter",
          "ModuleNotPresentInSpace"
        ]
      },
      "UpdateServiceInSpaceRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "spaceId",
          "moduleType",
          "moduleStatus"
        ],
        "properties": {
          "moduleStatus": {
            "nullable": false,
            "$ref": "#/components/schemas/ModuleStatusEnum"
          }
        }
      },
      "ModuleTypeEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Invalid",
          "AccessMobile",
          "AccessParking",
          "AccessCardReader",
          "Bookings"
        ],
        "enum": [
          "Invalid",
          "AccessMobile",
          "AccessParking",
          "AccessCardReader",
          "Bookings"
        ]
      },
      "ModuleStatusEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Invalid",
          "Enabled",
          "Disabled"
        ],
        "enum": [
          "Invalid",
          "Enabled",
          "Disabled"
        ]
      },
      "ErrorResponseOfEndpointErrorOfSetFavouriteErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfSetFavouriteErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfSetFavouriteErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/SetFavouriteErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "SetFavouriteErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "SpaceNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "SpaceNotFound"
        ]
      },
      "SetFavouriteSpaceRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "spaceId"
        ],
        "properties": {
          "favourite": {
            "type": "boolean",
            "default": "True"
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfRemoveModuleFromSpaceErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfRemoveModuleFromSpaceErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfRemoveModuleFromSpaceErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/RemoveModuleFromSpaceErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "RemoveModuleFromSpaceErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter",
          "ModuleNotPresentInSpace"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter",
          "ModuleNotPresentInSpace"
        ]
      },
      "ErrorResponseOfEndpointErrorOfGetSpaceErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetSpaceErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetSpaceErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetSpaceErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetSpaceErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "PermissionServiceError",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "PermissionServiceError",
          "InvalidParameter"
        ]
      },
      "GetSpaceResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "securityGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupDtoLite"
            }
          },
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/SpaceType"
          },
          "favourite": {
            "type": "boolean"
          },
          "rootSpaceId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "modules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModuleDto"
            }
          },
          "accessPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessPointDto"
            }
          },
          "path": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "guid"
            }
          },
          "peopleCapacity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "address": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AddressDto"
              }
            ]
          },
          "securityGroupsIBelongTo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupDtoLite"
            }
          },
          "securityGroupsIManageMembersOf": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupDtoLite"
            }
          }
        }
      },
      "GroupDtoLite": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          },
          "friendlyName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SpaceType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Undefined",
          "SmartCommunity",
          "Building",
          "Floor",
          "Apartment",
          "SwimmingPool",
          "Tennis",
          "Padel",
          "Football",
          "Basketball",
          "ParkingSpace",
          "ParkingLot",
          "StorageRoom",
          "BuildingPart",
          "Block",
          "Stairs",
          "Gym"
        ],
        "enum": [
          "Undefined",
          "SmartCommunity",
          "Building",
          "Floor",
          "Apartment",
          "SwimmingPool",
          "Tennis",
          "Padel",
          "Football",
          "Basketball",
          "ParkingSpace",
          "ParkingLot",
          "StorageRoom",
          "BuildingPart",
          "Block",
          "Stairs",
          "Gym"
        ]
      },
      "ModuleDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ModuleTypeEnum"
          },
          "status": {
            "$ref": "#/components/schemas/ModuleStatusEnum"
          },
          "associatedServiceType": {
            "$ref": "#/components/schemas/ServiceTypeEnum"
          }
        }
      },
      "ServiceTypeEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Invalid",
          "Booking",
          "Access"
        ],
        "enum": [
          "Invalid",
          "Booking",
          "Access"
        ]
      },
      "AccessPointDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/AccessPointTypeEnum"
          },
          "allowedAccessTechnologies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessTechnologyEnum"
            }
          },
          "ioTId": {
            "type": "string"
          }
        }
      },
      "AccessPointTypeEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Invalid",
          "Door",
          "Gate",
          "Turnstile",
          "Barrier",
          "Elevator",
          "Stair",
          "Escalator",
          "Lift",
          "Ramp",
          "Other"
        ],
        "enum": [
          "Invalid",
          "Door",
          "Gate",
          "Turnstile",
          "Barrier",
          "Elevator",
          "Stair",
          "Escalator",
          "Lift",
          "Ramp",
          "Other"
        ]
      },
      "AccessTechnologyEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Invalid",
          "BluetoothSmartphoneCode",
          "BluetoothDongleCode",
          "Card",
          "Internet"
        ],
        "enum": [
          "Invalid",
          "BluetoothSmartphoneCode",
          "BluetoothDongleCode",
          "Card",
          "Internet"
        ]
      },
      "ErrorResponseOfEndpointErrorOfGetSpacesErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetSpacesErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetSpacesErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetSpacesErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetSpacesErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "PermissionServiceError",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "PermissionServiceError",
          "InvalidParameter"
        ]
      },
      "GetSpacesResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpaceDtoLite"
            }
          }
        }
      },
      "SpaceDtoLite": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/SpaceType"
          },
          "favourite": {
            "type": "boolean"
          },
          "rootSpaceId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "modules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModuleDto"
            }
          },
          "accessPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessPointDto"
            }
          },
          "path": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "guid"
            }
          },
          "peopleCapacity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "address": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AddressDto"
              }
            ]
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfGetMySpacesErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetMySpacesErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetMySpacesErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetMySpacesErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetMySpacesErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "PermissionServiceError",
          "OwnerAndRequestUserMismatch",
          "UserNotInOrganizationAdminGroup",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "PermissionServiceError",
          "OwnerAndRequestUserMismatch",
          "UserNotInOrganizationAdminGroup",
          "InvalidParameter"
        ]
      },
      "GetMySpacesRequest": {
        "type": "object",
        "description": "Get my owned spaces only by type",
        "additionalProperties": false,
        "properties": {
          "owner": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/OwnerDto"
              }
            ]
          }
        }
      },
      "OwnerDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "nullable": false,
            "$ref": "#/components/schemas/OwnerTypeEnum"
          },
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false
          }
        }
      },
      "OwnerTypeEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Invalid",
          "User",
          "Organization"
        ],
        "enum": [
          "Invalid",
          "User",
          "Organization"
        ]
      },
      "ErrorResponseOfEndpointErrorOfGetMyFavouriteSpacesErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetMyFavouriteSpacesErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetMyFavouriteSpacesErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetMyFavouriteSpacesErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetMyFavouriteSpacesErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter"
        ]
      },
      "GetMyFavouriteSpacesResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpaceDtoLite"
            }
          },
          "cursor": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfCreateSpaceErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfCreateSpaceErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfCreateSpaceErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/CreateSpaceErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "CreateSpaceErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "ErrorGeneratingPermissions",
          "ParentSpaceHasNoSecurityGroups",
          "GroupDoesNotExist"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "ErrorGeneratingPermissions",
          "ParentSpaceHasNoSecurityGroups",
          "GroupDoesNotExist"
        ]
      },
      "CreateSpaceResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "spaceId": {
            "type": "string",
            "format": "guid"
          },
          "securityGroups": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/GroupDtoLite"
            }
          }
        }
      },
      "CreateSpaceRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "spaceType",
          "creationOptions"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "parentSpaceId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "spaceType": {
            "nullable": false,
            "$ref": "#/components/schemas/SpaceTypeEnum"
          },
          "timeZoneId": {
            "type": "string"
          },
          "peopleCapacity": {
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "nullable": true,
            "exclusiveMinimum": true
          },
          "creationOptions": {
            "nullable": false,
            "$ref": "#/components/schemas/SpaceCreationOptions"
          },
          "owner": {
            "description": "Owner of the space. If null, the requester will be the owner",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/OwnerDto"
              }
            ]
          }
        }
      },
      "SpaceCreationOptions": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "createDefaultSecurityGroups"
        ],
        "properties": {
          "createDefaultSecurityGroups": {
            "type": "boolean",
            "default": "True",
            "nullable": false
          },
          "parentsOfAdminsGroup": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid"
            }
          },
          "parentsOfMembersGroup": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid"
            }
          },
          "parentsOfGuestsGroup": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid"
            }
          },
          "parentsOfOnlyViewGroup": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid"
            }
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfAdminQuerySpacesErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfAdminQuerySpacesErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfAdminQuerySpacesErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/AdminQuerySpacesErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "AdminQuerySpacesErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter"
        ]
      },
      "AdminQuerySpacesResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpaceDtoLite"
            }
          },
          "cursor": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfAddModuleToSpaceErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfAddModuleToSpaceErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfAddModuleToSpaceErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/AddModuleToSpaceErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "AddModuleToSpaceErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter",
          "ModuleAlreadyAdded"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter",
          "ModuleAlreadyAdded"
        ]
      },
      "AddModuleToSpaceRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "spaceId",
          "moduleType"
        ],
        "properties": {
          "moduleType": {
            "nullable": false,
            "$ref": "#/components/schemas/ModuleTypeEnum"
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfRegeneratePermissionErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfRegeneratePermissionErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfRegeneratePermissionErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/RegeneratePermissionErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "RegeneratePermissionErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ]
      },
      "RegeneratePermissionsForUserRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "entityId"
        ],
        "properties": {
          "entityType": {
            "$ref": "#/components/schemas/EntityTypeEnum"
          },
          "entityId": {
            "type": "string",
            "format": "guid",
            "nullable": false
          }
        }
      },
      "EntityTypeEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "User",
          "Group",
          "Space"
        ],
        "enum": [
          "User",
          "Group",
          "Space"
        ]
      },
      "ErrorResponseOfEndpointErrorOfRegeneratePermissionErrorCode2": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfRegeneratePermissionErrorCode2"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfRegeneratePermissionErrorCode2": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/RegeneratePermissionErrorCode2"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "RegeneratePermissionErrorCode2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ]
      },
      "ErrorResponseOfEndpointErrorOfListByGranteePermissionErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfListByGranteePermissionErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfListByGranteePermissionErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/ListByGranteePermissionErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "ListByGranteePermissionErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ]
      },
      "ListPermissionsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionDtoResponse"
            }
          },
          "cursor": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PermissionDtoResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "contextType": {
            "$ref": "#/components/schemas/ContextTypeEnum"
          },
          "context": {
            "type": "string"
          },
          "resourceType": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "actionObject": {
            "type": "string",
            "nullable": true
          },
          "granteeType": {
            "$ref": "#/components/schemas/GranteeTypeEnum"
          },
          "granteeId": {
            "type": "string",
            "format": "guid"
          },
          "appHolder": {
            "type": "string"
          },
          "inheritedFrom": {
            "type": "string",
            "nullable": true
          },
          "grantor": {
            "$ref": "#/components/schemas/GrantorDto"
          }
        }
      },
      "ContextTypeEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "invalid",
          "space",
          "user",
          "group"
        ],
        "enum": [
          "invalid",
          "space",
          "user",
          "group"
        ]
      },
      "GranteeTypeEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Invalid",
          "User",
          "Group"
        ],
        "enum": [
          "Invalid",
          "User",
          "Group"
        ]
      },
      "GrantorDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "grantorType": {
            "$ref": "#/components/schemas/GrantorTypeEnum"
          },
          "grantorId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          }
        }
      },
      "GrantorTypeEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Invalid",
          "System_OnCreation",
          "Booking",
          "User"
        ],
        "enum": [
          "Invalid",
          "System_OnCreation",
          "Booking",
          "User"
        ]
      },
      "ErrorResponseOfEndpointErrorOfListByContextPermissionErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfListByContextPermissionErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfListByContextPermissionErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/ListByContextPermissionErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "ListByContextPermissionErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ]
      },
      "ErrorResponseOfEndpointErrorOfDeletePermissionErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfDeletePermissionErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfDeletePermissionErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/DeletePermissionErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "DeletePermissionErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ]
      },
      "DeletePermissionRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "contextType",
          "context",
          "resourceType",
          "action",
          "granteeType",
          "granteeId",
          "permissionUserGrantorId"
        ],
        "properties": {
          "contextType": {
            "nullable": false,
            "$ref": "#/components/schemas/ContextTypeEnum"
          },
          "context": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-zA-Z\\-\\.0-9\\s]+$",
            "nullable": false
          },
          "resourceType": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-zA-Z\\-\\.0-9\\s]+$",
            "nullable": false
          },
          "action": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-zA-Z\\-\\.0-9\\s]+$",
            "nullable": false
          },
          "actionObject": {
            "type": "string",
            "pattern": "^[a-zA-Z\\-\\.0-9\\s]+|\\*$",
            "nullable": true
          },
          "granteeType": {
            "nullable": false,
            "$ref": "#/components/schemas/GranteeTypeEnum"
          },
          "granteeId": {
            "type": "string",
            "format": "guid",
            "nullable": false
          },
          "appHolder": {
            "type": "string",
            "description": "App Id. If null, the app holder from current token will be used",
            "pattern": "^[a-zA-Z\\-\\.0-9\\s]+$",
            "nullable": true
          },
          "permissionUserGrantorId": {
            "type": "string",
            "format": "guid",
            "nullable": false
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfCreatePermissionErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfCreatePermissionErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfCreatePermissionErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/CreatePermissionErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "CreatePermissionErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "GranteeNotFound"
        ]
      },
      "CreatePermissionRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "contextType",
          "context",
          "resourceType",
          "action",
          "granteeType",
          "granteeId"
        ],
        "properties": {
          "contextType": {
            "nullable": false,
            "$ref": "#/components/schemas/ContextTypeEnum"
          },
          "context": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-zA-Z\\-\\.0-9\\s]+$",
            "nullable": false
          },
          "resourceType": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-zA-Z\\-\\.0-9\\s]+$",
            "nullable": false
          },
          "action": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-zA-Z\\-\\.0-9\\s]+$",
            "nullable": false
          },
          "actionObject": {
            "type": "string",
            "pattern": "^[a-zA-Z\\-\\.0-9\\s]+|\\*$",
            "nullable": true
          },
          "granteeType": {
            "nullable": false,
            "$ref": "#/components/schemas/GranteeTypeEnum"
          },
          "granteeId": {
            "type": "string",
            "format": "guid",
            "nullable": false
          },
          "appHolder": {
            "type": "string",
            "description": "App Id. If null, the app holder from current token will be used",
            "pattern": "^[a-zA-Z\\-\\.0-9\\s]+$",
            "nullable": true
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfGetOrganizationErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetOrganizationErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetOrganizationErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetOrganizationErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetOrganizationErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "OrganizationNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "OrganizationNotFound"
        ]
      },
      "GetOrganizationResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "organizationId": {
            "type": "string",
            "format": "guid"
          },
          "defaultAdminGroup": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupDtoLite2"
            }
          },
          "numberSpaces": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GroupDtoLite2": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfGetMyOrganizationsErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetMyOrganizationsErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetMyOrganizationsErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetMyOrganizationsErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetMyOrganizationsErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "PermissionServiceError",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "PermissionServiceError",
          "InvalidParameter"
        ]
      },
      "ErrorResponseOfEndpointErrorOfDeleteOrganizationErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfDeleteOrganizationErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfDeleteOrganizationErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/DeleteOrganizationErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "DeleteOrganizationErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "OrganizationNotEmpty",
          "OrganizationNotFound",
          "ErrorModifyingPermissions"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "OrganizationNotEmpty",
          "OrganizationNotFound",
          "ErrorModifyingPermissions"
        ]
      },
      "ErrorResponseOfEndpointErrorOfCreateOrganizationErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfCreateOrganizationErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfCreateOrganizationErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/CreateOrganizationErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "CreateOrganizationErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "ErrorGeneratingPermissions",
          "OwnerNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "ErrorGeneratingPermissions",
          "OwnerNotFound"
        ]
      },
      "CreateOrganizationResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "organizationId": {
            "type": "string",
            "format": "guid"
          },
          "defaultAdminGroupId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          }
        }
      },
      "CreateOrganizationRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "ownerId": {
            "type": "string",
            "description": "Id of the user who is creating the organization. If not provided, the requester will be used.",
            "format": "guid",
            "nullable": true
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfAdminQueryOrganizationsErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfAdminQueryOrganizationsErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfAdminQueryOrganizationsErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/AdminQueryOrganizationsErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "AdminQueryOrganizationsErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter"
        ]
      },
      "AdminQueryOrganizationsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationDtoLite"
            }
          },
          "cursor": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OrganizationDtoLite": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfCreateLegacyGatewaysErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfCreateLegacyGatewaysErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfCreateLegacyGatewaysErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/CreateLegacyGatewaysErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "CreateLegacyGatewaysErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError"
        ]
      },
      "CreateLegacyGatewaysResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "gateways": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegacyGatewayLiteDto"
            }
          }
        }
      },
      "LegacyGatewayLiteDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ioTThingArn": {
            "type": "string"
          },
          "ioTThingCertificateArn": {
            "type": "string",
            "nullable": true
          },
          "awsAccountId": {
            "type": "string"
          },
          "awsRegion": {
            "type": "string"
          }
        }
      },
      "CreateLegacyGatewaysRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "gateways"
        ],
        "properties": {
          "gateways": {
            "type": "array",
            "nullable": false,
            "items": {
              "$ref": "#/components/schemas/LegacyGatewayForCreationDto"
            }
          }
        }
      },
      "LegacyGatewayForCreationDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "fwVersion": {
            "type": "string"
          },
          "ioTThingArn": {
            "type": "string"
          },
          "ioTThingName": {
            "type": "string"
          },
          "ioTThingCertificateArn": {
            "type": "string",
            "nullable": true
          },
          "awsAccountId": {
            "type": "string"
          },
          "awsRegion": {
            "type": "string"
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfAddOrRemoveGatewayToSpaceErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfAddOrRemoveGatewayToSpaceErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfAddOrRemoveGatewayToSpaceErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/AddOrRemoveGatewayToSpaceErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "AddOrRemoveGatewayToSpaceErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError"
        ]
      },
      "AddOrRemoveGatewayToSpaceRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "gatewayId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfRemoveMemberFromGroupErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfRemoveMemberFromGroupErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfRemoveMemberFromGroupErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/RemoveMemberFromGroupErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "RemoveMemberFromGroupErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "ErrorModifyingPermissions",
          "MemberAlreadyInGroup",
          "GroupNotFound",
          "MemberNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "ErrorModifyingPermissions",
          "MemberAlreadyInGroup",
          "GroupNotFound",
          "MemberNotFound"
        ]
      },
      "RemoveMemberFromGroupRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "groupId",
          "memberType",
          "memberId"
        ],
        "properties": {
          "memberType": {
            "nullable": false,
            "$ref": "#/components/schemas/MemberTypeEnum"
          },
          "memberId": {
            "type": "string",
            "format": "guid",
            "nullable": false
          }
        }
      },
      "MemberTypeEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Invalid",
          "Group",
          "User"
        ],
        "enum": [
          "Invalid",
          "Group",
          "User"
        ]
      },
      "ErrorResponseOfEndpointErrorOfListMembersOfGroupErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfListMembersOfGroupErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfListMembersOfGroupErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/ListMembersOfGroupErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "ListMembersOfGroupErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "GroupNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "GroupNotFound"
        ]
      },
      "ListMembersOfGroupResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberOfGroup"
            }
          },
          "cursor": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "MemberOfGroup": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypeEnum"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfGetGroupErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetGroupErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetGroupErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetGroupErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetGroupErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "GroupNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "GroupNotFound"
        ]
      },
      "GetGroupResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "parentGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupDtoLite3"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/OwnerDto2"
          },
          "relatedEntity": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/RelatedEntityDto"
              }
            ]
          },
          "numberSubGroups": {
            "type": "integer",
            "format": "int32"
          },
          "numberUsers": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "GroupDtoLite3": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "OwnerDto2": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/OwnerTypeEnum2"
          },
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false
          }
        }
      },
      "OwnerTypeEnum2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Invalid",
          "User",
          "Organization"
        ],
        "enum": [
          "Invalid",
          "User",
          "Organization"
        ]
      },
      "RelatedEntityDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "entityId": {
            "type": "string",
            "format": "guid"
          },
          "relationType": {
            "$ref": "#/components/schemas/RelationType"
          }
        }
      },
      "RelationType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "SpaceAdminSecurityGroup",
          "SpaceRegularSecurityGroup",
          "OrganizationAdminGroup"
        ],
        "enum": [
          "SpaceAdminSecurityGroup",
          "SpaceRegularSecurityGroup",
          "OrganizationAdminGroup"
        ]
      },
      "ErrorResponseOfEndpointErrorOfGetGroupsErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetGroupsErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetGroupsErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetGroupsErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetGroupsErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "PermissionServiceError",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "PermissionServiceError",
          "InvalidParameter"
        ]
      },
      "ErrorResponseOfEndpointErrorOfDeleteGroupErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfDeleteGroupErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfDeleteGroupErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/DeleteGroupErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "DeleteGroupErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "ErrorGeneratingPermissions",
          "GroupNotEmpty"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "ErrorGeneratingPermissions",
          "GroupNotEmpty"
        ]
      },
      "ErrorResponseOfEndpointErrorOfCreateGroupErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfCreateGroupErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfCreateGroupErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/CreateGroupErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "CreateGroupErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "ErrorGeneratingPermissions"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "ErrorGeneratingPermissions"
        ]
      },
      "CreateGroupResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "groupId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "CreateGroupRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "friendlyName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "description": "Owner of the group. If null, the requester will be the owner",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/OwnerDto2"
              }
            ]
          },
          "spaceId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfAdminQueryGroupsErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfAdminQueryGroupsErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfAdminQueryGroupsErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/AdminQueryGroupsErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "AdminQueryGroupsErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter"
        ]
      },
      "AdminQueryGroupsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupDto"
            }
          },
          "cursor": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GroupDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "parentGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupDtoLite3"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/OwnerDto2"
          },
          "relatedEntity": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/RelatedEntityDto"
              }
            ]
          },
          "numberSubGroups": {
            "type": "integer",
            "format": "int32"
          },
          "numberUsers": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfAddMemberToGroupErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfAddMemberToGroupErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfAddMemberToGroupErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/AddMemberToGroupErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "AddMemberToGroupErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "ErrorModifyingPermissions",
          "MemberAlreadyInGroup",
          "GroupNotFound",
          "MemberNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "ErrorModifyingPermissions",
          "MemberAlreadyInGroup",
          "GroupNotFound",
          "MemberNotFound"
        ]
      },
      "AddMemberToGroupRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "groupId",
          "memberType",
          "memberId"
        ],
        "properties": {
          "memberType": {
            "nullable": false,
            "$ref": "#/components/schemas/MemberTypeEnum"
          },
          "memberId": {
            "type": "string",
            "format": "guid",
            "nullable": false
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfGetTimeSlotsErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetTimeSlotsErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetTimeSlotsErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetTimeSlotsErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetTimeSlotsErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "SpaceNotFound",
          "DateOutsideRange",
          "BookingConfigurationNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "SpaceNotFound",
          "DateOutsideRange",
          "BookingConfigurationNotFound"
        ]
      },
      "GetTimeSlotsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "bookingConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingConfigurationDtoNano"
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingTimeSlotDto"
            }
          }
        }
      },
      "BookingConfigurationDtoNano": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          },
          "spaceId": {
            "type": "string",
            "format": "guid"
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "bookingIsByGroup": {
            "type": "boolean"
          },
          "maxActiveBookingsPerUserOrGroup": {
            "type": "integer",
            "format": "int32"
          },
          "maxTimeSlotsPerBooking": {
            "type": "integer",
            "format": "int32"
          },
          "maxBookingsPerSlot": {
            "type": "integer",
            "format": "int32"
          },
          "maxParticipants": {
            "type": "integer",
            "format": "int32"
          },
          "minParticipants": {
            "type": "integer",
            "format": "int32"
          },
          "participantsCanAutoEnroll": {
            "type": "boolean"
          },
          "minCancellationTimeInMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "leewayMinutesToAccess": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "BookingTimeSlotDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "startTimeHour": {
            "type": "integer",
            "format": "int32"
          },
          "startTimeMinute": {
            "type": "integer",
            "format": "int32"
          },
          "durationInMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "price": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "currency": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CurrencyEnum"
              }
            ]
          },
          "dayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeek"
          },
          "availableBookings": {
            "type": "integer",
            "format": "int32"
          },
          "bookingConfigurationId": {
            "type": "string",
            "format": "guid"
          },
          "myAssociatedBooking": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/BookingLiteDto"
              }
            ]
          }
        }
      },
      "CurrencyEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "EUR",
          "USD",
          "GBP"
        ],
        "enum": [
          "EUR",
          "USD",
          "GBP"
        ]
      },
      "DayOfWeek": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ]
      },
      "BookingLiteDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "ownerName": {
            "type": "string",
            "nullable": true
          },
          "ownerType": {
            "$ref": "#/components/schemas/OwnerTypeEnum3"
          },
          "ownerId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "OwnerTypeEnum3": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "User",
          "Group"
        ],
        "enum": [
          "User",
          "Group"
        ]
      },
      "ErrorResponseOfEndpointErrorOfGetBookingsErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetBookingsErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetBookingsErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetBookingsErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetBookingsErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "UnknownTimeZone"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "UnknownTimeZone"
        ]
      },
      "GetBookingsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ownedBookings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingDtoAsOwner"
            }
          },
          "participatedBookings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingDtoAsParticipant"
            }
          }
        }
      },
      "BookingDtoAsOwner": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "spaceId": {
            "type": "string",
            "format": "guid"
          },
          "ownerName": {
            "type": "string",
            "nullable": true
          },
          "ownerType": {
            "$ref": "#/components/schemas/OwnerTypeEnum3"
          },
          "ownerId": {
            "type": "string",
            "format": "guid"
          },
          "startDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "endDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "price": {
            "type": "number",
            "format": "float"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyEnum"
          },
          "timeSlots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingTimeSlotLiteDto"
            }
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParticipantDto"
            }
          }
        }
      },
      "BookingTimeSlotLiteDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "startTimeHour": {
            "type": "integer",
            "format": "int32"
          },
          "startTimeMinute": {
            "type": "integer",
            "format": "int32"
          },
          "durationInMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "price": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "currency": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CurrencyEnum"
              }
            ]
          }
        }
      },
      "ParticipantDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "BookingDtoAsParticipant": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "spaceId": {
            "type": "string",
            "format": "guid"
          },
          "ownerName": {
            "type": "string",
            "nullable": true
          },
          "ownerType": {
            "$ref": "#/components/schemas/OwnerTypeEnum3"
          },
          "ownerId": {
            "type": "string",
            "format": "guid"
          },
          "startDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "endDateTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfGetBookingConfigurationErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetBookingConfigurationErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetBookingConfigurationErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetBookingConfigurationErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetBookingConfigurationErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "BookingConfigurationNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "BookingConfigurationNotFound"
        ]
      },
      "ErrorResponseOfEndpointErrorOfGetBookingConfigurationsErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetBookingConfigurationsErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetBookingConfigurationsErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetBookingConfigurationsErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetBookingConfigurationsErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError"
        ]
      },
      "ErrorResponseOfEndpointErrorOfGenerateTimeSlotsErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGenerateTimeSlotsErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGenerateTimeSlotsErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GenerateTimeSlotsErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GenerateTimeSlotsErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "DateOutsideRange",
          "ConfigurationOverlapsWithAnother",
          "AlreadyGeneratedTimeSlots"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "DateOutsideRange",
          "ConfigurationOverlapsWithAnother",
          "AlreadyGeneratedTimeSlots"
        ]
      },
      "GenerateTimeSlotsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "numberOfGeneratedTimeSlots": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GenerateTimeSlotsRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "bookingConfigurationId": {
            "type": "string",
            "format": "guid"
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfDeleteBookingErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfDeleteBookingErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfDeleteBookingErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/DeleteBookingErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "DeleteBookingErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "SpaceNotFound",
          "BookingNotFound",
          "PermissionsModificationProblem",
          "TooLateToCancelBooking",
          "BookingAlreadyCanceled"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "SpaceNotFound",
          "BookingNotFound",
          "PermissionsModificationProblem",
          "TooLateToCancelBooking",
          "BookingAlreadyCanceled"
        ]
      },
      "ErrorResponseOfEndpointErrorOfCreateBookingErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfCreateBookingErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfCreateBookingErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/CreateBookingErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "CreateBookingErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "SpaceNotFound",
          "DateOutsideRange",
          "BookingConfigurationNotFound",
          "SlotsAreEmpty",
          "SomeSlotsNotAvailable",
          "SlotsExceedMaxSlotsPerBooking",
          "UserHasTooManyActiveBookings",
          "SlotsAreNotInTheSameDay",
          "UserIsNotMemberOfAnyGroup",
          "SomeSlotsInThePast",
          "ParticipantsAutoEnrollIsNotPermitted",
          "SlotAreNotContinuous"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "SpaceNotFound",
          "DateOutsideRange",
          "BookingConfigurationNotFound",
          "SlotsAreEmpty",
          "SomeSlotsNotAvailable",
          "SlotsExceedMaxSlotsPerBooking",
          "UserHasTooManyActiveBookings",
          "SlotsAreNotInTheSameDay",
          "UserIsNotMemberOfAnyGroup",
          "SomeSlotsInThePast",
          "ParticipantsAutoEnrollIsNotPermitted",
          "SlotAreNotContinuous"
        ]
      },
      "CreateBookingResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "bookingId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "CreateBookingRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "timeSlots"
        ],
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "timeSlots": {
            "type": "array",
            "minLength": 1,
            "nullable": false,
            "items": {
              "$ref": "#/components/schemas/BookingTimeSlotForBookingDto"
            }
          },
          "participants": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid"
            }
          },
          "participantsCanAutoEnroll": {
            "type": "boolean"
          }
        }
      },
      "BookingTimeSlotForBookingDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "startTimeHour": {
            "type": "integer",
            "format": "int32"
          },
          "startTimeMinute": {
            "type": "integer",
            "format": "int32"
          },
          "durationInMinutes": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfCreateBookingConfigurationErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfCreateBookingConfigurationErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfCreateBookingConfigurationErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/CreateBookingConfigurationErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "CreateBookingConfigurationErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "ConfigurationOverlapsWithAnother",
          "TimeSlotsOverlapWithAnother",
          "ParticipantsExceedsSpaceCapacity",
          "PeopleCapacityNotDefinedInSpace"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "ConfigurationOverlapsWithAnother",
          "TimeSlotsOverlapWithAnother",
          "ParticipantsExceedsSpaceCapacity",
          "PeopleCapacityNotDefinedInSpace"
        ]
      },
      "CreateBookingConfigurationResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "bookingConfigurationId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "CreateBookingConfigurationRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "timeSlotGenerators",
          "allowedGroups"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "timeSlotGenerators": {
            "type": "array",
            "minLength": 1,
            "nullable": false,
            "items": {
              "$ref": "#/components/schemas/BookingTimeSlotGeneratorDto"
            }
          },
          "bookingIsByGroup": {
            "type": "boolean"
          },
          "allowedGroups": {
            "type": "array",
            "minLength": 1,
            "nullable": false,
            "items": {
              "type": "string",
              "format": "guid"
            }
          },
          "maxActiveBookingsPerUserOrGroup": {
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": true
          },
          "maxTimeSlotsPerBooking": {
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": true
          },
          "maxBookingsPerSlot": {
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": true
          },
          "maxParticipants": {
            "type": "integer",
            "format": "int32",
            "minimum": 1.0
          },
          "minParticipants": {
            "type": "integer",
            "format": "int32",
            "minimum": 1.0
          },
          "participantsCanAutoEnroll": {
            "type": "boolean"
          },
          "minCancellationTimeInMinutes": {
            "type": "integer",
            "format": "int32",
            "minimum": 0.0
          },
          "leewayMinutesToAccess": {
            "type": "integer",
            "format": "int32",
            "minimum": 0.0
          },
          "generatePermissionAccess": {
            "type": "boolean"
          }
        }
      },
      "BookingTimeSlotGeneratorDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "startTimeHour": {
            "type": "integer",
            "format": "int32"
          },
          "startTimeMinute": {
            "type": "integer",
            "format": "int32"
          },
          "endTimeHour": {
            "type": "integer",
            "format": "int32"
          },
          "endTimeMinute": {
            "type": "integer",
            "format": "int32"
          },
          "slotDurationInMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "price": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "currency": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CurrencyEnum"
              }
            ]
          },
          "daysOfWeek": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeek"
            }
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfAdminQueryTimeSlotsErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfAdminQueryTimeSlotsErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfAdminQueryTimeSlotsErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/AdminQueryTimeSlotsErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "AdminQueryTimeSlotsErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "SpaceNotFound",
          "DateOutsideRange"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "SpaceNotFound",
          "DateOutsideRange"
        ]
      },
      "AdminQueryTimeSlotsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingTimeSlotDtoForAdmin"
            }
          }
        }
      },
      "BookingTimeSlotDtoForAdmin": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "startTimeHour": {
            "type": "integer",
            "format": "int32"
          },
          "startTimeMinute": {
            "type": "integer",
            "format": "int32"
          },
          "durationInMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "price": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "currency": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CurrencyEnum"
              }
            ]
          },
          "dayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeek"
          },
          "availableBookings": {
            "type": "integer",
            "format": "int32"
          },
          "bookingConfigurationId": {
            "type": "string",
            "format": "guid"
          },
          "bookings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingLiteDto"
            }
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfAdminQueryBookingsErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfAdminQueryBookingsErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfAdminQueryBookingsErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/AdminQueryBookingsErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "AdminQueryBookingsErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "UnknownTimeZone"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "UnknownTimeZone"
        ]
      },
      "AdminQueryBookingsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingDtoAsOwner"
            }
          },
          "cursor": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfTokenErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfTokenErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfTokenErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/TokenErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "TokenErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "MissingRefreshToken",
          "NotAuthorized",
          "PasswordResetRequired",
          "UserNotConfirmed",
          "UserNotFound"
        ],
        "enum": [
          "Unspecified",
          "MissingRefreshToken",
          "NotAuthorized",
          "PasswordResetRequired",
          "UserNotConfirmed",
          "UserNotFound"
        ]
      },
      "AuthResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "challengeName": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "accessToken": {
            "type": "string"
          },
          "idToken": {
            "type": "string"
          },
          "tokenType": {
            "type": "string"
          },
          "expiresIn": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TokenRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "applicationType",
          "code",
          "codeVerifier",
          "grantType"
        ],
        "properties": {
          "code": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "codeVerifier": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "grantType": {
            "minLength": 1,
            "nullable": false,
            "$ref": "#/components/schemas/AppConstants_GrantType"
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AppConstants_GrantType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "AuthorizationCode",
          "RefreshToken"
        ],
        "enum": [
          "AuthorizationCode",
          "RefreshToken"
        ]
      },
      "ErrorResponseOfEndpointErrorOfSignUpErrorCodes": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfSignUpErrorCodes"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfSignUpErrorCodes": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/SignUpErrorCodes"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "SignUpErrorCodes": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "NotAuthorized",
          "InvalidPassword",
          "UserNameExists",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "NotAuthorized",
          "InvalidPassword",
          "UserNameExists",
          "InvalidParameter"
        ]
      },
      "SignUpRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "password",
          "email",
          "givenName",
          "phoneNumber",
          "phoneNumberISOCode"
        ],
        "properties": {
          "password": {
            "type": "string",
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{8,128}$",
            "nullable": false
          },
          "email": {
            "type": "string",
            "pattern": "^[^@]+@[^@]+$",
            "nullable": false
          },
          "givenName": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "familyName": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "nullable": false
          },
          "phoneNumberISOCode": {
            "type": "string",
            "nullable": false
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfSignInErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfSignInErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfSignInErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/SignInErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "SignInErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "NotAuthorized",
          "PasswordResetRequired",
          "UserNotConfirmed",
          "UserNotFound",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "NotAuthorized",
          "PasswordResetRequired",
          "UserNotConfirmed",
          "UserNotFound",
          "InvalidParameter"
        ]
      },
      "SignInRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "applicationType",
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "pattern": "^[^@]+@[^@]+$",
            "nullable": false
          },
          "password": {
            "type": "string",
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{8,128}$",
            "nullable": false
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfResendConfirmationCodeErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfResendConfirmationCodeErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfResendConfirmationCodeErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/ResendConfirmationCodeErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "ResendConfirmationCodeErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "UserNotFound",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "UserNotFound",
          "InvalidParameter"
        ]
      },
      "ResendCodeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[^@]+@[^@]+$",
            "nullable": false
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfLogoutErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfLogoutErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfLogoutErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/LogoutErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "LogoutErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "MissingRefreshToken",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "MissingRefreshToken",
          "InvalidParameter"
        ]
      },
      "LogoutRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfIdpsErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfIdpsErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfIdpsErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/IdpsErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "IdpsErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified"
        ],
        "enum": [
          "Unspecified"
        ]
      },
      "IdpsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "baseUrl": {
            "type": "string"
          },
          "redirectUri": {
            "type": "string"
          },
          "responseType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfForgotPasswordErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfForgotPasswordErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfForgotPasswordErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/ForgotPasswordErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "ForgotPasswordErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "UserNotFound",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "UserNotFound",
          "InvalidParameter"
        ]
      },
      "ForgotPasswordRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[^@]+@[^@]+$",
            "nullable": false
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfConfirmMfaErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfConfirmMfaErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfConfirmMfaErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/ConfirmMfaErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "ConfirmMfaErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "AliasExists",
          "CodeMismatch",
          "InvalidPassword",
          "MFAMethodNotFound",
          "PasswordResetRequired",
          "SoftwareTokenMFANotFound",
          "UserNotConfirmed",
          "UserNotFound",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "AliasExists",
          "CodeMismatch",
          "InvalidPassword",
          "MFAMethodNotFound",
          "PasswordResetRequired",
          "SoftwareTokenMFANotFound",
          "UserNotConfirmed",
          "UserNotFound",
          "InvalidParameter"
        ]
      },
      "ConfirmMfaRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "applicationType",
          "userId",
          "sessionId",
          "challengeCode",
          "challengeName"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "sessionId": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "challengeCode": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "challengeName": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "ErrorResponseOfConfirmForgotPasswordErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ConfirmForgotPasswordErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "ConfirmForgotPasswordErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "CodeMismatch",
          "ExpiredCode",
          "InvalidPassword",
          "TooManyFailedAttempts",
          "UserNotConfirmed",
          "UserNotFound",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "CodeMismatch",
          "ExpiredCode",
          "InvalidPassword",
          "TooManyFailedAttempts",
          "UserNotConfirmed",
          "UserNotFound",
          "InvalidParameter"
        ]
      },
      "ResetPasswordRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "email",
          "password",
          "code"
        ],
        "properties": {
          "email": {
            "type": "string",
            "pattern": "^[^@]+@[^@]+$",
            "nullable": false
          },
          "password": {
            "type": "string",
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{8,128}$",
            "nullable": false
          },
          "code": {
            "type": "string",
            "maxLength": 6,
            "minLength": 6,
            "nullable": false
          }
        }
      },
      "ErrorResponseOfConfirmEmailErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ConfirmEmailErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "ConfirmEmailErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "AliasExists",
          "CodeMismatch",
          "ExpiredCode",
          "TooManyFailedAttempts",
          "UserNotFound",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "AliasExists",
          "CodeMismatch",
          "ExpiredCode",
          "TooManyFailedAttempts",
          "UserNotFound",
          "InvalidParameter"
        ]
      },
      "ConfirmEmailRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "email",
          "code"
        ],
        "properties": {
          "email": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[^@]+@[^@]+$",
            "nullable": false
          },
          "code": {
            "type": "string",
            "maxLength": 6,
            "minLength": 6,
            "nullable": false
          }
        }
      },
      "ErrorResponseOfChangePasswordErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ChangePasswordErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "ChangePasswordErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "InvalidPassword",
          "PasswordResetRequired",
          "UserNotConfirmed",
          "UserNotFound",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "InvalidPassword",
          "PasswordResetRequired",
          "UserNotConfirmed",
          "UserNotFound",
          "InvalidParameter"
        ]
      },
      "ChangePasswordRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "currentPassword",
          "newPassword"
        ],
        "properties": {
          "currentPassword": {
            "type": "string",
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{8,128}$",
            "nullable": false
          },
          "newPassword": {
            "type": "string",
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{8,128}$",
            "nullable": false
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfCreateApplicationErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfCreateApplicationErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfCreateApplicationErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/CreateApplicationErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "CreateApplicationErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "ErrorGeneratingPermissions"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "ErrorGeneratingPermissions"
        ]
      },
      "CreateApplicationResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "applicationId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "CreateApplicationRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "description": "Owner of the Application. If null, the requester will be the owner",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/OwnerDto3"
              }
            ]
          }
        }
      },
      "OwnerDto3": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/OwnerTypeEnum4"
          },
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false
          }
        }
      },
      "OwnerTypeEnum4": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Invalid",
          "User",
          "Organization"
        ],
        "enum": [
          "Invalid",
          "User",
          "Organization"
        ]
      },
      "ErrorResponseOfEndpointErrorOfGetMyAccessMeansErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetMyAccessMeansErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetMyAccessMeansErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetMyAccessMeansErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetMyAccessMeansErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "UserNotFound",
          "PermissionServiceError"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "UserNotFound",
          "PermissionServiceError"
        ]
      },
      "GetMyAccessMeansResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMeanDto"
            }
          }
        }
      },
      "AccessMeanDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "type": {
            "$ref": "#/components/schemas/AccessMeanTypeEnum"
          },
          "accessTechnologies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessTechnologyEnum2"
            }
          },
          "serialNumber": {
            "type": "string",
            "nullable": true
          },
          "associatedUserId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "allowKeyGeneration": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "AccessMeanTypeEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Invalid",
          "MiFareClassicCard",
          "BluetoothDongle"
        ],
        "enum": [
          "Invalid",
          "MiFareClassicCard",
          "BluetoothDongle"
        ]
      },
      "AccessTechnologyEnum2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Invalid",
          "BluetoothSmartphoneCode",
          "BluetoothDongleCode",
          "Card",
          "Internet"
        ],
        "enum": [
          "Invalid",
          "BluetoothSmartphoneCode",
          "BluetoothDongleCode",
          "Card",
          "Internet"
        ]
      },
      "ErrorResponseOfEndpointErrorOfGetAccessPointErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetAccessPointErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetAccessPointErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetAccessPointErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetAccessPointErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "PermissionServiceError",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "PermissionServiceError",
          "InvalidParameter"
        ]
      },
      "GetAccessPointResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "lock": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/LockDto"
              }
            ]
          },
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/AccessPointTypeEnum2"
          },
          "allowedAccessTechnologies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessTechnologyEnum2"
            }
          },
          "accessPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessPermissionDto"
            }
          }
        }
      },
      "LockDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/LockTypeEnum"
          },
          "ioTGatewayId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "LockTypeEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "LegacyGatewayRelayLock"
        ],
        "enum": [
          "Unknown",
          "LegacyGatewayRelayLock"
        ]
      },
      "AccessPointTypeEnum2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Invalid",
          "Door",
          "Turnstile",
          "Barrier",
          "Elevator",
          "Other"
        ],
        "enum": [
          "Invalid",
          "Door",
          "Turnstile",
          "Barrier",
          "Elevator",
          "Other"
        ]
      },
      "AccessPermissionDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "grantor": {
            "$ref": "#/components/schemas/GrantorDto2"
          },
          "accessTechnology": {
            "$ref": "#/components/schemas/AccessTechnologyEnum2"
          },
          "timeRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeRangeDto"
            }
          },
          "accessKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessKeyLiteDto"
            }
          }
        }
      },
      "GrantorDto2": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "grantorType": {
            "$ref": "#/components/schemas/GrantorTypeEnum2"
          },
          "grantorId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          }
        }
      },
      "GrantorTypeEnum2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "System_OnCreation",
          "Booking",
          "User"
        ],
        "enum": [
          "System_OnCreation",
          "Booking",
          "User"
        ]
      },
      "TimeRangeDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "startTime": {
            "$ref": "#/components/schemas/TimeRecordDto"
          },
          "endTime": {
            "$ref": "#/components/schemas/TimeRecordDto"
          }
        }
      },
      "TimeRecordDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "minutes": {
            "type": "string"
          },
          "hour": {
            "type": "string"
          },
          "daysOfWeek": {
            "$ref": "#/components/schemas/DebosDayOfWeekEnum"
          },
          "dayOfMonth": {
            "type": "string"
          },
          "month": {
            "type": "string"
          },
          "year": {
            "type": "string"
          }
        }
      },
      "DebosDayOfWeekEnum": {
        "type": "string",
        "description": "",
        "x-enumFlags": true,
        "x-enumNames": [
          "All",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
          "Sunday"
        ],
        "enum": [
          "All",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
          "Sunday"
        ]
      },
      "AccessKeyLiteDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "accessMean": {
            "$ref": "#/components/schemas/AccessMeanLiteDto"
          },
          "syncStatus": {
            "$ref": "#/components/schemas/AccessKeySyncStatusEnum"
          },
          "lastSync": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AccessMeanLiteDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "type": {
            "$ref": "#/components/schemas/AccessMeanTypeEnum"
          }
        }
      },
      "AccessKeySyncStatusEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Applied",
          "InProgress",
          "Failed",
          "NotApplied"
        ],
        "enum": [
          "Applied",
          "InProgress",
          "Failed",
          "NotApplied"
        ]
      },
      "ErrorResponseOfEndpointErrorOfGetAccessPointsErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetAccessPointsErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetAccessPointsErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetAccessPointsErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetAccessPointsErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "PermissionServiceError",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "PermissionServiceError",
          "InvalidParameter"
        ]
      },
      "GetAccessPointsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessPointLiteDto"
            }
          }
        }
      },
      "AccessPointLiteDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/AccessPointTypeEnum2"
          },
          "allowedAccessTechnologies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessTechnologyEnum2"
            }
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfGetAccessMeanErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetAccessMeanErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetAccessMeanErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetAccessMeanErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetAccessMeanErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter",
          "PermissionServiceError"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter",
          "PermissionServiceError"
        ]
      },
      "GetAccessMeanResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "accessTechnologies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessTechnologyEnum2"
            }
          },
          "serialNumber": {
            "type": "string",
            "nullable": true
          },
          "associatedUserId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "allowKeyGeneration": {
            "type": "boolean",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "guid"
          },
          "type": {
            "$ref": "#/components/schemas/AccessMeanTypeEnum"
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfGetAccessKeysErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGetAccessKeysErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGetAccessKeysErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GetAccessKeysErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GetAccessKeysErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError"
        ]
      },
      "ErrorResponseOfEndpointErrorOfGenerateKeyErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfGenerateKeyErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfGenerateKeyErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/GenerateKeyErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "GenerateKeyErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "AccessMeanDoesNotSupportAccessTechnology",
          "AccessPointNotFound",
          "SpaceNotFound",
          "UserNotFound",
          "AccessMeanNotFound",
          "ApplicationNotFound",
          "AccessMeanRequiredForAccessTechnology",
          "AccessTechnologyNotSupported",
          "UniqueConstraintViolation",
          "AccessPointHasNoLock"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "AccessMeanDoesNotSupportAccessTechnology",
          "AccessPointNotFound",
          "SpaceNotFound",
          "UserNotFound",
          "AccessMeanNotFound",
          "ApplicationNotFound",
          "AccessMeanRequiredForAccessTechnology",
          "AccessTechnologyNotSupported",
          "UniqueConstraintViolation",
          "AccessPointHasNoLock"
        ]
      },
      "GenerateKeyResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "accessKeyId": {
            "type": "string",
            "format": "guid"
          },
          "accessTechnology": {
            "$ref": "#/components/schemas/AccessTechnologyEnum2"
          }
        }
      },
      "GenerateKeyRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "accessMeanId": {
            "type": "string",
            "format": "guid"
          },
          "accessTechnology": {
            "$ref": "#/components/schemas/AccessTechnologyEnum2"
          },
          "userIdOfKeyHolder": {
            "type": "string",
            "description": "User id of the key holder. If null, the key will be generated for the current user.",
            "format": "guid",
            "nullable": true
          },
          "owner": {
            "description": "Owner of this key. If null, the requester will be the owner",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/OwnerDto4"
              }
            ]
          }
        }
      },
      "OwnerDto4": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "type": {
            "$ref": "#/components/schemas/OwnerTypeEnum5"
          },
          "id": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "OwnerTypeEnum5": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Invalid",
          "User",
          "Organization"
        ],
        "enum": [
          "Invalid",
          "User",
          "Organization"
        ]
      },
      "ErrorResponseOfEndpointErrorOfDeleteKeyErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfDeleteKeyErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfDeleteKeyErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/DeleteKeyErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "DeleteKeyErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "AccessPointNotFound",
          "ErrorSyncingToIot",
          "AccessKeyNotFound"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "AccessPointNotFound",
          "ErrorSyncingToIot",
          "AccessKeyNotFound"
        ]
      },
      "ErrorResponseOfEndpointErrorOfCreateSmartPhoneErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfCreateSmartPhoneErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfCreateSmartPhoneErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/CreateSmartPhoneErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "CreateSmartPhoneErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "SmartphoneAlreadyExists"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "SmartphoneAlreadyExists"
        ]
      },
      "CreateSmartPhoneResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "smartPhoneId": {
            "type": "string",
            "format": "guid"
          },
          "privateRSAKey": {
            "$ref": "#/components/schemas/PrivateRSAKeyDto"
          }
        }
      },
      "PrivateRSAKeyDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "xmlKey": {
            "type": "string"
          },
          "pemKey": {
            "type": "string"
          }
        }
      },
      "CreateSmartPhoneRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "serialNumber"
        ],
        "properties": {
          "serialNumber": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "manufacturer": {
            "type": "string",
            "nullable": true
          },
          "model": {
            "type": "string",
            "nullable": true
          },
          "operatingSystem": {
            "type": "string",
            "nullable": true
          },
          "operatingSystemVersion": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "description": "Owner of the space. If null, the requester will be the owner",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/OwnerDto4"
              }
            ]
          },
          "userId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfCreateLegacyRelayLockErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfCreateLegacyRelayLockErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfCreateLegacyRelayLockErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/CreateLegacyRelayLockErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "CreateLegacyRelayLockErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "ErrorGeneratingPermissions",
          "SpaceNotFound",
          "EntityAlreadyExists",
          "GroupDoesNotExist"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "ErrorGeneratingPermissions",
          "SpaceNotFound",
          "EntityAlreadyExists",
          "GroupDoesNotExist"
        ]
      },
      "CreateLegacyRelayLockResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "lockId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "CreateLegacyRelayLockRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "legacyGatewayId",
          "spaceId",
          "accessPointId"
        ],
        "properties": {
          "legacyGatewayId": {
            "type": "string",
            "format": "guid",
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "relayIndex": {
            "type": "integer",
            "format": "int32",
            "maximum": 1.0,
            "minimum": 0.0
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfCreateAccessPointErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfCreateAccessPointErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfCreateAccessPointErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/CreateAccessPointErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "CreateAccessPointErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "ErrorGeneratingPermissions",
          "SpaceNotFound",
          "EntityAlreadyExists",
          "GroupDoesNotExist",
          "UniqueConstraintViolation"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "ErrorGeneratingPermissions",
          "SpaceNotFound",
          "EntityAlreadyExists",
          "GroupDoesNotExist",
          "UniqueConstraintViolation"
        ]
      },
      "CreateAccessPointResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "accessPointId": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "CreateAccessPointRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "spaceId",
          "accessPointType",
          "accessPointCreationPermissionOptions"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ioTId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "customerIdentificationCode": {
            "type": "string",
            "description": "This is an internal user id. It can be used to give a custom Id to this access point for identification inside a building etc.",
            "nullable": true
          },
          "accessPointType": {
            "nullable": false,
            "$ref": "#/components/schemas/AccessPointTypeEnum2"
          },
          "allowedAccessTechnologies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessTechnologyEnum2"
            }
          },
          "accessPointCreationPermissionOptions": {
            "description": "If not defined, No access will be granted by default",
            "nullable": false,
            "$ref": "#/components/schemas/AccessPointCreationPermissionOptionsDto"
          }
        }
      },
      "AccessPointCreationPermissionOptionsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "securityGroupsWithPermanentAccess"
        ],
        "properties": {
          "securityGroupsWithPermanentAccess": {
            "type": "array",
            "nullable": false,
            "items": {
              "type": "string",
              "format": "guid"
            }
          },
          "permissionOptionsForPermanentAccessGroups": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AccessTechnologyWithOptionsDto"
            }
          },
          "securityGroupsWithListPermission": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "guid"
            }
          }
        }
      },
      "AccessTechnologyWithOptionsDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "accessTechnology": {
            "$ref": "#/components/schemas/AccessTechnologyEnum2"
          },
          "maxKeysPerTechnology": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "organizationsWhoseAccessMeansCanBeUsed": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid"
            }
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfAssociateAccessMeanToUserErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfAssociateAccessMeanToUserErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfAssociateAccessMeanToUserErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/AssociateAccessMeanToUserErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "AssociateAccessMeanToUserErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "UserNotFound",
          "AccessMeanNotFound",
          "AccessMeanAlreadyAssociated",
          "AccessMeanAlreadyAssociatedWithTheUser"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "UserNotFound",
          "AccessMeanNotFound",
          "AccessMeanAlreadyAssociated",
          "AccessMeanAlreadyAssociatedWithTheUser"
        ]
      },
      "AssociateAccessMeanToUserRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "accessMeanId",
          "userId"
        ],
        "properties": {
          "allowKeyGeneration": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfAdminQueryAccessMeansErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfAdminQueryAccessMeansErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfAdminQueryAccessMeansErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/AdminQueryAccessMeansErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "AdminQueryAccessMeansErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "InvalidParameter"
        ]
      },
      "AdminQueryAccessMeansResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMeanDtoBase"
            }
          },
          "cursor": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AccessMeanDtoBase": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "type": {
            "$ref": "#/components/schemas/AccessMeanTypeEnum"
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfCreateMiFareClassicCardsErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfCreateMiFareClassicCardsErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfCreateMiFareClassicCardsErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/CreateMiFareClassicCardsErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "CreateMiFareClassicCardsErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError",
          "UniqueConstraintViolation"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError",
          "UniqueConstraintViolation"
        ]
      },
      "CreateMiFareClassicCardsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "cards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMeanDtoBase"
            }
          }
        }
      },
      "CreateMiFareClassicCardsRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "cards",
          "owner"
        ],
        "properties": {
          "cards": {
            "type": "array",
            "nullable": false,
            "items": {
              "$ref": "#/components/schemas/MiFareClassicCardForCreationDto"
            }
          },
          "owner": {
            "description": "Owner of the access mean",
            "nullable": false,
            "$ref": "#/components/schemas/OwnerDto4"
          }
        }
      },
      "MiFareClassicCardForCreationDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "serialNumber": {
            "type": "string"
          },
          "cardCode": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ErrorResponseOfEndpointErrorOfCreateBluetoothDonglesErrorCode": {
        "type": "object",
        "description": "Response DTO for an error condition in the API",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Operation Id for tracing purposes",
            "nullable": true
          },
          "operationError": {
            "description": "The operation error returned by the service.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndpointErrorOfCreateBluetoothDonglesErrorCode"
              }
            ]
          },
          "requestFormatErrors": {
            "type": "array",
            "description": "List of validation errors if any.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValidationFailure"
            }
          }
        }
      },
      "EndpointErrorOfCreateBluetoothDonglesErrorCode": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/CreateBluetoothDonglesErrorCode"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "CreateBluetoothDonglesErrorCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unspecified",
          "DatabaseError"
        ],
        "enum": [
          "Unspecified",
          "DatabaseError"
        ]
      },
      "CreateBluetoothDonglesResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "dongles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMeanDtoBase"
            }
          }
        }
      },
      "CreateBluetoothDonglesRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "dongles",
          "owner"
        ],
        "properties": {
          "dongles": {
            "type": "array",
            "nullable": false,
            "items": {
              "$ref": "#/components/schemas/BluetoothDongleForCreationDto"
            }
          },
          "owner": {
            "description": "Owner of the access mean",
            "nullable": false,
            "$ref": "#/components/schemas/OwnerDto4"
          }
        }
      },
      "BluetoothDongleForCreationDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "serialNumber": {
            "type": "string"
          },
          "bluetoothDongleCode": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "securitySchemes": {
      "JWTBearerAuth": {
        "type": "http",
        "description": "Enter a JWT token to authorize the requests...",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
